digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] data.aws_caller_identity.current" [label = "data.aws_caller_identity.current", shape = "box"]
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" [label = "module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high", shape = "box"]
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" [label = "module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low", shape = "box"]
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" [label = "module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high", shape = "box"]
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" [label = "module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low", shape = "box"]
		"[root] module.alb.aws_alb.alb" [label = "module.alb.aws_alb.alb", shape = "box"]
		"[root] module.alb.aws_alb_listener.front_end" [label = "module.alb.aws_alb_listener.front_end", shape = "box"]
		"[root] module.alb.aws_alb_target_group.alb_target_group" [label = "module.alb.aws_alb_target_group.alb_target_group", shape = "box"]
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" [label = "module.alb_certificate.aws_iam_server_certificate.certificate", shape = "box"]
		"[root] module.alb_subnet.aws_subnet.subnet" [label = "module.alb_subnet.aws_subnet.subnet", shape = "box"]
		"[root] module.aurora_cluster.aws_db_parameter_group.instance_parameters" [label = "module.aurora_cluster.aws_db_parameter_group.instance_parameters", shape = "box"]
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" [label = "module.aurora_cluster.aws_rds_cluster.aurora_cluster", shape = "box"]
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" [label = "module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance", shape = "box"]
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" [label = "module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group", shape = "box"]
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" [label = "module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group", shape = "box"]
		"[root] module.autoscaling_bridge.aws_autoscaling_group.cluster" [label = "module.autoscaling_bridge.aws_autoscaling_group.cluster", shape = "box"]
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" [label = "module.autoscaling_bridge.aws_launch_configuration.ecs", shape = "box"]
		"[root] module.autoscaling_bridge.data.template_file.user_data" [label = "module.autoscaling_bridge.data.template_file.user_data", shape = "box"]
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" [label = "module.autoscaling_bridge.data.template_file.user_data_loading", shape = "box"]
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" [label = "module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster", shape = "box"]
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" [label = "module.autoscaling_ecs_cluster.aws_launch_configuration.ecs", shape = "box"]
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" [label = "module.autoscaling_ecs_cluster.data.template_file.user_data", shape = "box"]
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" [label = "module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day", shape = "box"]
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" [label = "module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night", shape = "box"]
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" [label = "module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket", shape = "box"]
		"[root] module.bucket-rds-log.data.template_file.bucket_policy" [label = "module.bucket-rds-log.data.template_file.bucket_policy", shape = "box"]
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" [label = "module.cf-bucket.aws_s3_bucket.s3-bucket", shape = "box"]
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" [label = "module.cf_certificate.aws_iam_server_certificate.certificate", shape = "box"]
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" [label = "module.cloudfront.aws_cloudfront_distribution.cloudfront", shape = "box"]
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23" [label = "module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23", shape = "box"]
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log" [label = "module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log", shape = "box"]
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log" [label = "module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log", shape = "box"]
		"[root] module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log" [label = "module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log", shape = "box"]
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log" [label = "module.cloudwatch-to-s3.data.template_file.lambda_input_app_log", shape = "box"]
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log" [label = "module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log", shape = "box"]
		"[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name" [label = "module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name", shape = "box"]
		"[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name" [label = "module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name", shape = "box"]
		"[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name" [label = "module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name", shape = "box"]
		"[root] module.ec2_ssh_key.aws_key_pair.ssh-key" [label = "module.ec2_ssh_key.aws_key_pair.ssh-key", shape = "box"]
		"[root] module.ecr-alfresco.aws_ecr_lifecycle_policy.ecr_lifecycle" [label = "module.ecr-alfresco.aws_ecr_lifecycle_policy.ecr_lifecycle", shape = "box"]
		"[root] module.ecr-alfresco.aws_ecr_repository.ecr" [label = "module.ecr-alfresco.aws_ecr_repository.ecr", shape = "box"]
		"[root] module.ecr-schede.aws_ecr_lifecycle_policy.ecr_lifecycle" [label = "module.ecr-schede.aws_ecr_lifecycle_policy.ecr_lifecycle", shape = "box"]
		"[root] module.ecr-schede.aws_ecr_repository.ecr" [label = "module.ecr-schede.aws_ecr_repository.ecr", shape = "box"]
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" [label = "module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket", shape = "box"]
		"[root] module.ecs-bucket.data.template_file.bucket_policy" [label = "module.ecs-bucket.data.template_file.bucket_policy", shape = "box"]
		"[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster" [label = "module.ecs_cluster.aws_ecs_cluster.ecs_cluster", shape = "box"]
		"[root] module.ecs_cluster.aws_ecs_service.main-app" [label = "module.ecs_cluster.aws_ecs_service.main-app", shape = "box"]
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" [label = "module.ecs_cluster.aws_ecs_task_definition.main-app", shape = "box"]
		"[root] module.ecs_cluster.data.aws_ecs_task_definition.main-app" [label = "module.ecs_cluster.data.aws_ecs_task_definition.main-app", shape = "box"]
		"[root] module.ecs_cluster.data.template_file.container_configuration" [label = "module.ecs_cluster.data.template_file.container_configuration", shape = "box"]
		"[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco" [label = "module.ecs_cluster_alfresco.aws_ecs_service.alfresco", shape = "box"]
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" [label = "module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco", shape = "box"]
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" [label = "module.ecs_cluster_alfresco.data.template_file.container_configuration", shape = "box"]
		"[root] module.ecs_subnet.aws_subnet.subnet" [label = "module.ecs_subnet.aws_subnet.subnet", shape = "box"]
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" [label = "module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs", shape = "box"]
		"[root] module.efs.aws_efs_file_system.efs" [label = "module.efs.aws_efs_file_system.efs", shape = "box"]
		"[root] module.efs.aws_efs_mount_target.mount_target" [label = "module.efs.aws_efs_mount_target.mount_target", shape = "box"]
		"[root] module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar" [label = "module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar", shape = "box"]
		"[root] module.elb_ecs.aws_elb.internal_elb" [label = "module.elb_ecs.aws_elb.internal_elb", shape = "box"]
		"[root] module.elb_ecs.aws_lb_cookie_stickiness_policy.stickiness" [label = "module.elb_ecs.aws_lb_cookie_stickiness_policy.stickiness", shape = "box"]
		"[root] module.iam_ecs_batch.aws_iam_instance_profile.simple_profile" [label = "module.iam_ecs_batch.aws_iam_instance_profile.simple_profile", shape = "box"]
		"[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role" [label = "module.iam_ecs_batch.aws_iam_role.iam_simple_role", shape = "box"]
		"[root] module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment" [label = "module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment", shape = "box"]
		"[root] module.iam_ecs_batch.data.template_file.trust" [label = "module.iam_ecs_batch.data.template_file.trust", shape = "box"]
		"[root] module.iam_operations.aws_iam_access_key.operations" [label = "module.iam_operations.aws_iam_access_key.operations", shape = "box"]
		"[root] module.iam_operations.aws_iam_user.operations" [label = "module.iam_operations.aws_iam_user.operations", shape = "box"]
		"[root] module.iam_operations.aws_iam_user_policy_attachment.operations" [label = "module.iam_operations.aws_iam_user_policy_attachment.operations", shape = "box"]
		"[root] module.iam_role.aws_iam_instance_profile.basic_iam_instance_profile" [label = "module.iam_role.aws_iam_instance_profile.basic_iam_instance_profile", shape = "box"]
		"[root] module.iam_role.aws_iam_role.basic_iam_role" [label = "module.iam_role.aws_iam_role.basic_iam_role", shape = "box"]
		"[root] module.iam_role.aws_iam_role_policy.basic_iam_role_policy" [label = "module.iam_role.aws_iam_role_policy.basic_iam_role_policy", shape = "box"]
		"[root] module.iam_service_batch.aws_iam_instance_profile.simple_profile" [label = "module.iam_service_batch.aws_iam_instance_profile.simple_profile", shape = "box"]
		"[root] module.iam_service_batch.aws_iam_role.iam_simple_role" [label = "module.iam_service_batch.aws_iam_role.iam_simple_role", shape = "box"]
		"[root] module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment" [label = "module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment", shape = "box"]
		"[root] module.iam_service_batch.data.template_file.trust" [label = "module.iam_service_batch.data.template_file.trust", shape = "box"]
		"[root] module.iam_ses.aws_iam_access_key.ses" [label = "module.iam_ses.aws_iam_access_key.ses", shape = "box"]
		"[root] module.iam_ses.aws_iam_user.ses" [label = "module.iam_ses.aws_iam_user.ses", shape = "box"]
		"[root] module.iam_ses.aws_iam_user_policy.ses_send" [label = "module.iam_ses.aws_iam_user_policy.ses_send", shape = "box"]
		"[root] module.internet_gateway.aws_eip.nat_eip" [label = "module.internet_gateway.aws_eip.nat_eip", shape = "box"]
		"[root] module.internet_gateway.aws_internet_gateway.internet_gateway" [label = "module.internet_gateway.aws_internet_gateway.internet_gateway", shape = "box"]
		"[root] module.internet_gateway.aws_nat_gateway.nat_gw" [label = "module.internet_gateway.aws_nat_gateway.nat_gw", shape = "box"]
		"[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor" [label = "module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor", shape = "box"]
		"[root] module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications" [label = "module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications", shape = "box"]
		"[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda" [label = "module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda", shape = "box"]
		"[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach" [label = "module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach", shape = "box"]
		"[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach-ecs" [label = "module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach-ecs", shape = "box"]
		"[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group" [label = "module.lambda_cloudfront.aws_lambda_function.update_alb_security_group", shape = "box"]
		"[root] module.lambda_cloudfront.aws_lambda_permission.ipchanged_sns" [label = "module.lambda_cloudfront.aws_lambda_permission.ipchanged_sns", shape = "box"]
		"[root] module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns" [label = "module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns", shape = "box"]
		"[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato" [label = "module.lambda_cloudfront.aws_sns_topic.waf_copletato", shape = "box"]
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription" [label = "module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription", shape = "box"]
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription" [label = "module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription", shape = "box"]
		"[root] module.lambda_cloudfront.data.archive_file.init" [label = "module.lambda_cloudfront.data.archive_file.init", shape = "box"]
		"[root] module.lambda_export_log_role.aws_iam_policy.iam_policy" [label = "module.lambda_export_log_role.aws_iam_policy.iam_policy", shape = "box"]
		"[root] module.lambda_export_log_role.aws_iam_role.iam_role" [label = "module.lambda_export_log_role.aws_iam_role.iam_role", shape = "box"]
		"[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment" [label = "module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment", shape = "box"]
		"[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" [label = "module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom", shape = "box"]
		"[root] module.lambda_iam_role.aws_iam_role.iam_for_lambda" [label = "module.lambda_iam_role.aws_iam_role.iam_for_lambda", shape = "box"]
		"[root] module.lambda_iam_role.aws_iam_role_policy_attachment.lambda-attach" [label = "module.lambda_iam_role.aws_iam_role_policy_attachment.lambda-attach", shape = "box"]
		"[root] module.logstash-role.aws_iam_policy.iam_policy" [label = "module.logstash-role.aws_iam_policy.iam_policy", shape = "box"]
		"[root] module.logstash-role.aws_iam_role.iam_role" [label = "module.logstash-role.aws_iam_role.iam_role", shape = "box"]
		"[root] module.logstash-role.aws_iam_role_policy_attachment.AWSLambdaVPCAccessExecutionRole" [label = "module.logstash-role.aws_iam_role_policy_attachment.AWSLambdaVPCAccessExecutionRole", shape = "box"]
		"[root] module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" [label = "module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom", shape = "box"]
		"[root] module.logstash-role.data.template_file.policy_configuration" [label = "module.logstash-role.data.template_file.policy_configuration", shape = "box"]
		"[root] module.rds_audit_iam_role.aws_iam_policy.iam_rds_log_policy" [label = "module.rds_audit_iam_role.aws_iam_policy.iam_rds_log_policy", shape = "box"]
		"[root] module.rds_audit_iam_role.aws_iam_role.iam_rds_log" [label = "module.rds_audit_iam_role.aws_iam_role.iam_rds_log", shape = "box"]
		"[root] module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy" [label = "module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy", shape = "box"]
		"[root] module.rds_subnet.aws_subnet.subnet" [label = "module.rds_subnet.aws_subnet.subnet", shape = "box"]
		"[root] module.route53.aws_route53_record.ecs_alfresco" [label = "module.route53.aws_route53_record.ecs_alfresco", shape = "box"]
		"[root] module.route53.aws_route53_record.efs" [label = "module.route53.aws_route53_record.efs", shape = "box"]
		"[root] module.route53.aws_route53_record.rds_schede" [label = "module.route53.aws_route53_record.rds_schede", shape = "box"]
		"[root] module.route53.aws_route53_zone.private_zone" [label = "module.route53.aws_route53_zone.private_zone", shape = "box"]
		"[root] module.route_table_alb.aws_route.route" [label = "module.route_table_alb.aws_route.route", shape = "box"]
		"[root] module.route_table_alb.aws_route.route_vpg" [label = "module.route_table_alb.aws_route.route_vpg", shape = "box"]
		"[root] module.route_table_alb.aws_route_table.route_table" [label = "module.route_table_alb.aws_route_table.route_table", shape = "box"]
		"[root] module.route_table_association_alb.aws_route_table_association.route_table_association" [label = "module.route_table_association_alb.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.route_table_association_aurora.aws_route_table_association.route_table_association" [label = "module.route_table_association_aurora.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.route_table_association_nat.aws_route_table_association.route_table_association" [label = "module.route_table_association_nat.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.route_table_aurora.aws_route.route" [label = "module.route_table_aurora.aws_route.route", shape = "box"]
		"[root] module.route_table_aurora.aws_route.route_vpg" [label = "module.route_table_aurora.aws_route.route_vpg", shape = "box"]
		"[root] module.route_table_aurora.aws_route_table.route_table" [label = "module.route_table_aurora.aws_route_table.route_table", shape = "box"]
		"[root] module.route_table_nat.aws_route.nat_route" [label = "module.route_table_nat.aws_route.nat_route", shape = "box"]
		"[root] module.route_table_nat.aws_route.vpg_route" [label = "module.route_table_nat.aws_route.vpg_route", shape = "box"]
		"[root] module.route_table_nat.aws_route_table.route_table" [label = "module.route_table_nat.aws_route_table.route_table", shape = "box"]
		"[root] module.route_table_temp.aws_route.route" [label = "module.route_table_temp.aws_route.route", shape = "box"]
		"[root] module.route_table_temp.aws_route.route_vpg" [label = "module.route_table_temp.aws_route.route_vpg", shape = "box"]
		"[root] module.route_table_temp.aws_route_table.route_table" [label = "module.route_table_temp.aws_route_table.route_table", shape = "box"]
		"[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3" [label = "module.s3-log-destination.aws_lambda_function.move_logs_to_s3", shape = "box"]
		"[root] module.s3-log-destination.data.archive_file.init" [label = "module.s3-log-destination.data.archive_file.init", shape = "box"]
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down" [label = "module.scaling_asg.aws_autoscaling_policy.scale_down", shape = "box"]
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down_mem" [label = "module.scaling_asg.aws_autoscaling_policy.scale_down_mem", shape = "box"]
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up" [label = "module.scaling_asg.aws_autoscaling_policy.scale_up", shape = "box"]
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up_mem" [label = "module.scaling_asg.aws_autoscaling_policy.scale_up_mem", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down" [label = "module.scaling_ecs.aws_appautoscaling_policy.scale_down", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem" [label = "module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up" [label = "module.scaling_ecs.aws_appautoscaling_policy.scale_up", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem" [label = "module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" [label = "module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night" [label = "module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night", shape = "box"]
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" [label = "module.scaling_ecs.aws_appautoscaling_target.ecs_target", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night", shape = "box"]
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" [label = "module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target", shape = "box"]
		"[root] module.security_group_alb.aws_security_group.security_group" [label = "module.security_group_alb.aws_security_group.security_group", shape = "box"]
		"[root] module.security_group_alb.aws_security_group_rule.egress_rule" [label = "module.security_group_alb.aws_security_group_rule.egress_rule", shape = "box"]
		"[root] module.security_group_alb.aws_security_group_rule.ingress_rule" [label = "module.security_group_alb.aws_security_group_rule.ingress_rule", shape = "box"]
		"[root] module.security_group_aurora.aws_security_group.security_group" [label = "module.security_group_aurora.aws_security_group.security_group", shape = "box"]
		"[root] module.security_group_aurora.aws_security_group_rule.egress_rule" [label = "module.security_group_aurora.aws_security_group_rule.egress_rule", shape = "box"]
		"[root] module.security_group_aurora.aws_security_group_rule.ingress_rule" [label = "module.security_group_aurora.aws_security_group_rule.ingress_rule", shape = "box"]
		"[root] module.security_group_ecs.aws_security_group.security_group" [label = "module.security_group_ecs.aws_security_group.security_group", shape = "box"]
		"[root] module.security_group_ecs.aws_security_group_rule.egress_rule" [label = "module.security_group_ecs.aws_security_group_rule.egress_rule", shape = "box"]
		"[root] module.security_group_ecs.aws_security_group_rule.ingress_rule" [label = "module.security_group_ecs.aws_security_group_rule.ingress_rule", shape = "box"]
		"[root] module.security_group_efs.aws_security_group.security_group" [label = "module.security_group_efs.aws_security_group.security_group", shape = "box"]
		"[root] module.security_group_efs.aws_security_group_rule.egress_rule" [label = "module.security_group_efs.aws_security_group_rule.egress_rule", shape = "box"]
		"[root] module.security_group_efs.aws_security_group_rule.ingress_rule" [label = "module.security_group_efs.aws_security_group_rule.ingress_rule", shape = "box"]
		"[root] module.ses-domain.aws_ses_domain_identity.domain" [label = "module.ses-domain.aws_ses_domain_identity.domain", shape = "box"]
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" [label = "module.sonda_schedetitolo_http.aws_lambda_function.logstash-http", shape = "box"]
		"[root] module.sonda_schedetitolo_http.data.archive_file.thezip" [label = "module.sonda_schedetitolo_http.data.archive_file.thezip", shape = "box"]
		"[root] module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate" [label = "module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate", shape = "box"]
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" [label = "module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql", shape = "box"]
		"[root] module.sonda_schedetitolo_sql.data.archive_file.thezip" [label = "module.sonda_schedetitolo_sql.data.archive_file.thezip", shape = "box"]
		"[root] module.vpc.aws_vpc.vpc" [label = "module.vpc.aws_vpc.vpc", shape = "box"]
		"[root] module.vpg.aws_vpn_gateway.vpn_gw" [label = "module.vpg.aws_vpn_gateway.vpn_gw", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole" [label = "module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" [label = "module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama" [label = "module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_cragricole_ip" [label = "module.waf-alb.aws_wafregional_regex_match_set.regex_cragricole_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_dns_others" [label = "module.waf-alb.aws_wafregional_regex_match_set.regex_dns_others", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_groupama_ip" [label = "module.waf-alb.aws_wafregional_regex_match_set.regex_groupama_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_others_ip" [label = "module.waf-alb.aws_wafregional_regex_match_set.regex_others_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip" [label = "module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others" [label = "module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip" [label = "module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip" [label = "module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_rule.rule_cragricole" [label = "module.waf-alb.aws_wafregional_rule.rule_cragricole", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_rule.rule_cs_rot_cav" [label = "module.waf-alb.aws_wafregional_rule.rule_cs_rot_cav", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_rule.rule_groupama" [label = "module.waf-alb.aws_wafregional_rule.rule_groupama", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_rule.rule_others" [label = "module.waf-alb.aws_wafregional_rule.rule_others", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl" [label = "module.waf-alb.aws_wafregional_web_acl.waf_alb_acl", shape = "box"]
		"[root] module.waf-alb.aws_wafregional_web_acl_association.waf" [label = "module.waf-alb.aws_wafregional_web_acl_association.waf", shape = "box"]
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" [label = "module.waf-bucket.aws_s3_bucket.s3-bucket", shape = "box"]
		"[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf" [label = "module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf", shape = "box"]
		"[root] provider.archive" [label = "provider.archive", shape = "diamond"]
		"[root] provider.aws" [label = "provider.aws", shape = "diamond"]
		"[root] provider.aws.ireland" [label = "provider.aws.ireland", shape = "diamond"]
		"[root] provider.aws.virginia" [label = "provider.aws.virginia", shape = "diamond"]
		"[root] provider.template" [label = "provider.template", shape = "diamond"]
		"[root] data.aws_caller_identity.current" -> "[root] provider.aws"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb.aws_alb_listener.front_end"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb.output.alb_dns_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_certificate.output.ssl_certificate_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.aurora_cluster.output.aurora_ids"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_bridge.output.asg_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_bridge.output.cluster_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_bridge.output.launch_configuration_ecs_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_ecs_cluster.output.launch_configuration_ecs_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.bucket-rds-log.output.bucket_domain_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cf-bucket.output.bucket_short_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cf_certificate.output.ssl_certificate_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudfront.output.cf_domain_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch_log_group.output.log_group_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch_log_group_alfresco.output.log_group_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.cloudwatch_log_group_aurora.output.log_group_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecr-alfresco.aws_ecr_lifecycle_policy.ecr_lifecycle"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecr-schede.aws_ecr_lifecycle_policy.ecr_lifecycle"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs-bucket.output.bucket_domain_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.efs.aws_efs_mount_target.mount_target"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.elb_ecs.aws_lb_cookie_stickiness_policy.stickiness"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_ecs_batch.aws_iam_instance_profile.simple_profile"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_ecs_batch.output.simple_iam_role_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_operations.aws_iam_user_policy_attachment.operations"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_role.aws_iam_role_policy.basic_iam_role_policy"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_service_batch.aws_iam_instance_profile.simple_profile"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_service_batch.output.simple_iam_role_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam_ses.aws_iam_user_policy.ses_send"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach-ecs"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_cloudfront.aws_lambda_permission.ipchanged_sns"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_iam_role.aws_iam_role_policy_attachment.lambda-attach"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_iam_role.output.lambda_iam_role_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.logstash-role.aws_iam_role_policy_attachment.AWSLambdaVPCAccessExecutionRole"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route53.aws_route53_record.ecs_alfresco"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route53.aws_route53_record.rds_schede"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_alb.aws_route.route"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_alb.aws_route.route_vpg"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_association_alb.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_association_aurora.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_association_nat.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_aurora.aws_route.route"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_aurora.aws_route.route_vpg"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_nat.aws_route.nat_route"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_nat.aws_route.vpg_route"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_temp.aws_route.route"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_temp.aws_route.route_vpg"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.route_table_temp.output.route_table_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_alb.aws_security_group_rule.egress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_alb.aws_security_group_rule.ingress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_aurora.aws_security_group_rule.egress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_aurora.aws_security_group_rule.ingress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_aurora.output.security_group_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs.aws_security_group_rule.egress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs.aws_security_group_rule.ingress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs.output.security_group_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_efs.aws_security_group_rule.egress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_efs.aws_security_group_rule.ingress_rule"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_efs.output.security_group_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.sonda_schedetitolo_http.output.lambda_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.sonda_schedetitolo_http.output.lambda_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.sonda_schedetitolo_sql.output.lambda_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.sonda_schedetitolo_sql.output.lambda_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.waf-alb.aws_wafregional_web_acl_association.waf"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.waf-alb.output.waf_web_acl_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.waf-bucket.output.bucket_short_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.alarm_sns"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecs_key_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecs_sg_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecs_subnet_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.iam_operations_access_key"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.iam_operations_secret_key"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.iam_ses_password"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.iam_ses_user"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ses_domain_verification_token"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.alfresco-rds"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.awslogs_retention"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.backup-enabled"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] var.load_balancer_suffix"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.asg_scaleup_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.cluster_name"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.ecs_alfresco_scaleup_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.ecs_scaleup_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.evaluation_periods"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.period"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high" -> "[root] module.alarms.var.upper_limit"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.asg_scaledown_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.cluster_name"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.ecs_alfresco_scaledown_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.ecs_scaledown_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.evaluation_periods"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.lower_limit_cpu"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low" -> "[root] module.alarms.var.period"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.asg_scaleup_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.cluster_name"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.ecs_alfresco_scaleup_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.ecs_scaleup_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.evaluation_periods"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.period"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high" -> "[root] module.alarms.var.upper_limit"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.asg_scaledown_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.cluster_name"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.ecs_alfresco_scaledown_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.ecs_scaledown_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.evaluation_periods"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.lower_limit_mem"
		"[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low" -> "[root] module.alarms.var.period"
		"[root] module.alarms.var.asg_scaledown_cpu" -> "[root] module.scaling_asg.output.scaledowncpu_arn"
		"[root] module.alarms.var.asg_scaledown_mem" -> "[root] module.scaling_asg.output.scaledownmem_arn"
		"[root] module.alarms.var.asg_scaleup_cpu" -> "[root] module.scaling_asg.output.scaleupcpu_arn"
		"[root] module.alarms.var.asg_scaleup_mem" -> "[root] module.scaling_asg.output.scaleupmem_arn"
		"[root] module.alarms.var.cluster_name" -> "[root] module.ecs_cluster.output.cluster_ecs_name"
		"[root] module.alarms.var.ecs_alfresco_scaledown_cpu" -> "[root] module.scaling_ecs_alfresco.output.scaledowncpu_arn"
		"[root] module.alarms.var.ecs_alfresco_scaledown_mem" -> "[root] module.scaling_ecs_alfresco.output.scaledownmem_arn"
		"[root] module.alarms.var.ecs_alfresco_scaleup_cpu" -> "[root] module.scaling_ecs_alfresco.output.scaleupcpu_arn"
		"[root] module.alarms.var.ecs_alfresco_scaleup_mem" -> "[root] module.scaling_ecs_alfresco.output.scaleupmem_arn"
		"[root] module.alarms.var.ecs_scaledown_cpu" -> "[root] module.scaling_ecs.output.scaledowncpu_arn"
		"[root] module.alarms.var.ecs_scaledown_mem" -> "[root] module.scaling_ecs.output.scaledownmem_arn"
		"[root] module.alarms.var.ecs_scaleup_cpu" -> "[root] module.scaling_ecs.output.scaleupcpu_arn"
		"[root] module.alarms.var.ecs_scaleup_mem" -> "[root] module.scaling_ecs.output.scaleupmem_arn"
		"[root] module.alarms.var.evaluation_periods" -> "[root] var.evaluation_periods"
		"[root] module.alarms.var.lower_limit_cpu" -> "[root] var.lower_limit_cpu"
		"[root] module.alarms.var.lower_limit_mem" -> "[root] var.lower_limit_mem"
		"[root] module.alarms.var.period" -> "[root] var.period"
		"[root] module.alarms.var.upper_limit" -> "[root] var.upper_limit"
		"[root] module.alb.aws_alb.alb" -> "[root] module.alb.var.alb_name"
		"[root] module.alb.aws_alb.alb" -> "[root] module.alb.var.owner"
		"[root] module.alb.aws_alb.alb" -> "[root] module.alb.var.security_groups"
		"[root] module.alb.aws_alb.alb" -> "[root] module.alb.var.subnets"
		"[root] module.alb.aws_alb_listener.front_end" -> "[root] module.alb.aws_alb_target_group.alb_target_group"
		"[root] module.alb.aws_alb_listener.front_end" -> "[root] module.alb.var.alb_listener_action_type"
		"[root] module.alb.aws_alb_listener.front_end" -> "[root] module.alb.var.alb_listener_port"
		"[root] module.alb.aws_alb_listener.front_end" -> "[root] module.alb.var.alb_listener_protocol"
		"[root] module.alb.aws_alb_listener.front_end" -> "[root] module.alb.var.alb_listener_ssl_certificate_arn"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.aws_alb.alb"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_healthy_threshold"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_interval"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_path"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_port"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_protocol"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_timeout"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.health_check_unhealthy_threshold"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.target_group_name"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.target_group_port"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.target_group_protocol"
		"[root] module.alb.aws_alb_target_group.alb_target_group" -> "[root] module.alb.var.vpc_id"
		"[root] module.alb.output.alb_arn" -> "[root] module.alb.aws_alb.alb"
		"[root] module.alb.output.alb_dns_name" -> "[root] module.alb.aws_alb.alb"
		"[root] module.alb.output.servizio_da_bilanciare_id" -> "[root] module.alb.aws_alb_target_group.alb_target_group"
		"[root] module.alb.var.alb_listener_action_type" -> "[root] var.alb_listener_action_type"
		"[root] module.alb.var.alb_listener_port" -> "[root] var.alb_listener_port"
		"[root] module.alb.var.alb_listener_protocol" -> "[root] var.alb_listener_protocol"
		"[root] module.alb.var.alb_listener_ssl_certificate_arn" -> "[root] module.alb_certificate.output.ssl_certificate_arn"
		"[root] module.alb.var.alb_name" -> "[root] var.alb_name"
		"[root] module.alb.var.health_check_healthy_threshold" -> "[root] var.health_check_healthy_threshold"
		"[root] module.alb.var.health_check_interval" -> "[root] var.health_check_interval"
		"[root] module.alb.var.health_check_path" -> "[root] var.health_check_path"
		"[root] module.alb.var.health_check_port" -> "[root] var.alb_port"
		"[root] module.alb.var.health_check_protocol" -> "[root] var.health_check_protocol"
		"[root] module.alb.var.health_check_timeout" -> "[root] var.health_check_timeout"
		"[root] module.alb.var.health_check_unhealthy_threshold" -> "[root] var.health_check_unhealthy_threshold"
		"[root] module.alb.var.owner" -> "[root] var.owner"
		"[root] module.alb.var.security_groups" -> "[root] module.security_group_alb.output.security_group_id"
		"[root] module.alb.var.subnets" -> "[root] module.alb_subnet.output.subnet_id"
		"[root] module.alb.var.target_group_name" -> "[root] var.target_group_name"
		"[root] module.alb.var.target_group_port" -> "[root] var.alb_port"
		"[root] module.alb.var.target_group_protocol" -> "[root] var.target_group_protocol"
		"[root] module.alb.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.certificate_body"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.certificate_chain"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.certificate_folder"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.certificate_name_prefix"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.certificate_private_key"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] module.alb_certificate.var.path"
		"[root] module.alb_certificate.aws_iam_server_certificate.certificate" -> "[root] provider.aws"
		"[root] module.alb_certificate.output.ssl_certificate_arn" -> "[root] module.alb_certificate.aws_iam_server_certificate.certificate"
		"[root] module.alb_certificate.output.ssl_certificate_id" -> "[root] module.alb_certificate.aws_iam_server_certificate.certificate"
		"[root] module.alb_certificate.var.certificate_body" -> "[root] var.certificate_body"
		"[root] module.alb_certificate.var.certificate_chain" -> "[root] var.certificate_chain"
		"[root] module.alb_certificate.var.certificate_folder" -> "[root] var.certificate_folder"
		"[root] module.alb_certificate.var.certificate_name_prefix" -> "[root] var.certificate_name_prefix"
		"[root] module.alb_certificate.var.certificate_private_key" -> "[root] var.certificate_private_key"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.c_subnet"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.owner"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.region"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.tag"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.vpc_address_space"
		"[root] module.alb_subnet.aws_subnet.subnet" -> "[root] module.alb_subnet.var.vpc_id"
		"[root] module.alb_subnet.output.subnet_cidr_block" -> "[root] module.alb_subnet.aws_subnet.subnet"
		"[root] module.alb_subnet.output.subnet_id" -> "[root] module.alb_subnet.aws_subnet.subnet"
		"[root] module.alb_subnet.var.owner" -> "[root] var.owner"
		"[root] module.alb_subnet.var.region" -> "[root] var.region"
		"[root] module.alb_subnet.var.region" -> "[root] var.zones"
		"[root] module.alb_subnet.var.tag" -> "[root] var.alb_subnet_name_suffix"
		"[root] module.alb_subnet.var.tag" -> "[root] var.owner"
		"[root] module.alb_subnet.var.vpc_address_space" -> "[root] var.vpc_address_space"
		"[root] module.alb_subnet.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.aurora_cluster.aws_db_parameter_group.instance_parameters" -> "[root] module.aurora_cluster.var.cluster_identifier"
		"[root] module.aurora_cluster.aws_db_parameter_group.instance_parameters" -> "[root] provider.aws"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.aurora_subnet_group_name"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.backup_retention_period"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.database_name"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.master_password"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.preferred_backup_window"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.preferred_maintenance_window"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.skip_final_snapshot"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.tag_cluster_name"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.tag_cluster_vpc"
		"[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster" -> "[root] module.aurora_cluster.var.vpc_security_group_ids"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.aws_db_parameter_group.instance_parameters"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.apply_immediately"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.identifier"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.instance_class"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.publicly_accessible"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.rds_cluster_instances"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.tag_instance_name"
		"[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance" -> "[root] module.aurora_cluster.var.tag_instance_vpc"
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" -> "[root] module.aurora_cluster.var.cluster_identifier"
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" -> "[root] module.aurora_cluster.var.log_iam_role"
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" -> "[root] module.aurora_cluster.var.master_username"
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" -> "[root] module.aurora_cluster.var.owner"
		"[root] module.aurora_cluster.aws_rds_cluster_parameter_group.aurora-parameter-group" -> "[root] module.aurora_cluster.var.rds_master_username"
		"[root] module.aurora_cluster.output.aurora_cluster_endpoint" -> "[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster"
		"[root] module.aurora_cluster.output.aurora_ids" -> "[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance"
		"[root] module.aurora_cluster.output.cluster_name" -> "[root] module.aurora_cluster.aws_rds_cluster.aurora_cluster"
		"[root] module.aurora_cluster.var.apply_immediately" -> "[root] var.rds_apply_immediately"
		"[root] module.aurora_cluster.var.aurora_subnet_group_name" -> "[root] module.aurora_subnet_group_name.output.name"
		"[root] module.aurora_cluster.var.cluster_identifier" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.database_name" -> "[root] var.rds_master_dbname"
		"[root] module.aurora_cluster.var.identifier" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.instance_class" -> "[root] var.rds_instance_type"
		"[root] module.aurora_cluster.var.log_iam_role" -> "[root] module.rds_audit_iam_role.output.iam_rds_log"
		"[root] module.aurora_cluster.var.master_password" -> "[root] var.rds_master_password"
		"[root] module.aurora_cluster.var.master_username" -> "[root] var.rds_master_username"
		"[root] module.aurora_cluster.var.owner" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.rds_cluster_instances" -> "[root] var.rds_cluster_instances"
		"[root] module.aurora_cluster.var.tag_cluster_name" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.tag_cluster_vpc" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.tag_cluster_vpc" -> "[root] var.vpc_name"
		"[root] module.aurora_cluster.var.tag_instance_name" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.tag_instance_vpc" -> "[root] var.owner"
		"[root] module.aurora_cluster.var.tag_instance_vpc" -> "[root] var.vpc_name"
		"[root] module.aurora_cluster.var.vpc_security_group_ids" -> "[root] module.security_group_aurora.output.security_group_id"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.owner"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.subnet_group_description"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.subnet_group_name"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.subnet_group_subnet_ids"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.tag_subnet_group_name"
		"[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group" -> "[root] module.aurora_subnet_group_name.var.tag_subnet_group_vpc"
		"[root] module.aurora_subnet_group_name.output.name" -> "[root] module.aurora_subnet_group_name.aws_db_subnet_group.aurora_subnet_group"
		"[root] module.aurora_subnet_group_name.var.owner" -> "[root] var.owner"
		"[root] module.aurora_subnet_group_name.var.subnet_group_name" -> "[root] var.owner"
		"[root] module.aurora_subnet_group_name.var.subnet_group_subnet_ids" -> "[root] module.rds_subnet.output.subnet_id"
		"[root] module.aurora_subnet_group_name.var.tag_subnet_group_name" -> "[root] var.owner"
		"[root] module.aurora_subnet_group_name.var.tag_subnet_group_vpc" -> "[root] var.owner"
		"[root] module.aurora_subnet_group_name.var.tag_subnet_group_vpc" -> "[root] var.vpc_name"
		"[root] module.autoscaling_bridge.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_bridge.aws_launch_configuration.ecs"
		"[root] module.autoscaling_bridge.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_bridge.var.health_check_grace_period"
		"[root] module.autoscaling_bridge.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_bridge.var.health_check_type"
		"[root] module.autoscaling_bridge.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_bridge.var.vpc_zone_identifier"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.data.template_file.user_data"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.data.template_file.user_data_loading"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.associate_public_ip_address"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.iam_instance_profile"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.image_id"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.instance_type"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.key_name"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.name"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.security_groups"
		"[root] module.autoscaling_bridge.aws_launch_configuration.ecs" -> "[root] module.autoscaling_bridge.var.user_data_name"
		"[root] module.autoscaling_bridge.data.template_file.user_data" -> "[root] module.autoscaling_bridge.var.bootstrap_EFS_DNS"
		"[root] module.autoscaling_bridge.data.template_file.user_data" -> "[root] provider.template"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] module.autoscaling_bridge.var.access_key"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] module.autoscaling_bridge.var.aws_caller_identity"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] module.autoscaling_bridge.var.bootstrap_EFS_DNS"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] module.autoscaling_bridge.var.owner"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] module.autoscaling_bridge.var.secret_key"
		"[root] module.autoscaling_bridge.data.template_file.user_data_loading" -> "[root] provider.template"
		"[root] module.autoscaling_bridge.output.asg_id" -> "[root] module.autoscaling_bridge.aws_autoscaling_group.cluster"
		"[root] module.autoscaling_bridge.output.cluster_name" -> "[root] module.autoscaling_bridge.aws_autoscaling_group.cluster"
		"[root] module.autoscaling_bridge.output.launch_configuration_ecs_name" -> "[root] module.autoscaling_bridge.aws_launch_configuration.ecs"
		"[root] module.autoscaling_bridge.var.access_key" -> "[root] module.iam_operations.output.iam_operations_access"
		"[root] module.autoscaling_bridge.var.associate_public_ip_address" -> "[root] var.associate_public_ip_address"
		"[root] module.autoscaling_bridge.var.aws_caller_identity" -> "[root] data.aws_caller_identity.current"
		"[root] module.autoscaling_bridge.var.bootstrap_EFS_DNS" -> "[root] module.route53.output.efs_dns"
		"[root] module.autoscaling_bridge.var.iam_instance_profile" -> "[root] module.iam_role.output.iam_instance_profile_id"
		"[root] module.autoscaling_bridge.var.image_id" -> "[root] var.instance_ami_bridge"
		"[root] module.autoscaling_bridge.var.instance_type" -> "[root] var.instance_type_bridge"
		"[root] module.autoscaling_bridge.var.key_name" -> "[root] module.ec2_ssh_key.output.ssh_key_name"
		"[root] module.autoscaling_bridge.var.name" -> "[root] var.name_bridge"
		"[root] module.autoscaling_bridge.var.owner" -> "[root] var.owner"
		"[root] module.autoscaling_bridge.var.secret_key" -> "[root] module.iam_operations.output.iam_operations_secret"
		"[root] module.autoscaling_bridge.var.security_groups" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] module.autoscaling_bridge.var.user_data_name" -> "[root] var.user_data_name"
		"[root] module.autoscaling_bridge.var.vpc_zone_identifier" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.desired_capacity"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.health_check_grace_period"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.health_check_type"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.max_size"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.min_size"
		"[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster" -> "[root] module.autoscaling_ecs_cluster.var.vpc_zone_identifier"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.data.template_file.user_data"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.associate_public_ip_address"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.iam_instance_profile"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.image_id"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.instance_type"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.key_name"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.name"
		"[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs" -> "[root] module.autoscaling_ecs_cluster.var.security_groups"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.awslogs_group"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.bootstrap_EFS_DNS"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.cluster_name"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.ecs_container_stop_timeout"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.owner"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] module.autoscaling_ecs_cluster.var.vol_host_path_resources"
		"[root] module.autoscaling_ecs_cluster.data.template_file.user_data" -> "[root] provider.template"
		"[root] module.autoscaling_ecs_cluster.output.asg_id" -> "[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster"
		"[root] module.autoscaling_ecs_cluster.output.cluster_name" -> "[root] module.autoscaling_ecs_cluster.aws_autoscaling_group.cluster"
		"[root] module.autoscaling_ecs_cluster.output.launch_configuration_ecs_name" -> "[root] module.autoscaling_ecs_cluster.aws_launch_configuration.ecs"
		"[root] module.autoscaling_ecs_cluster.var.associate_public_ip_address" -> "[root] var.associate_public_ip_address"
		"[root] module.autoscaling_ecs_cluster.var.awslogs_group" -> "[root] var.awslogs_group_suffix"
		"[root] module.autoscaling_ecs_cluster.var.awslogs_group" -> "[root] var.family_common_name"
		"[root] module.autoscaling_ecs_cluster.var.bootstrap_EFS_DNS" -> "[root] module.route53.output.efs_dns"
		"[root] module.autoscaling_ecs_cluster.var.cluster_name" -> "[root] var.cluster_name"
		"[root] module.autoscaling_ecs_cluster.var.desired_capacity" -> "[root] var.desired_capacity"
		"[root] module.autoscaling_ecs_cluster.var.ecs_container_stop_timeout" -> "[root] var.ecs_container_stop_timeout"
		"[root] module.autoscaling_ecs_cluster.var.iam_instance_profile" -> "[root] module.iam_role.output.iam_instance_profile_id"
		"[root] module.autoscaling_ecs_cluster.var.image_id" -> "[root] var.instance_ami"
		"[root] module.autoscaling_ecs_cluster.var.instance_type" -> "[root] var.instance_type"
		"[root] module.autoscaling_ecs_cluster.var.key_name" -> "[root] module.ec2_ssh_key.output.ssh_key_name"
		"[root] module.autoscaling_ecs_cluster.var.max_size" -> "[root] var.max_size"
		"[root] module.autoscaling_ecs_cluster.var.min_size" -> "[root] var.min_size"
		"[root] module.autoscaling_ecs_cluster.var.name" -> "[root] var.cluster_name"
		"[root] module.autoscaling_ecs_cluster.var.owner" -> "[root] var.owner"
		"[root] module.autoscaling_ecs_cluster.var.security_groups" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] module.autoscaling_ecs_cluster.var.vol_host_path_resources" -> "[root] var.vol_host_path_resources"
		"[root] module.autoscaling_ecs_cluster.var.vpc_zone_identifier" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" -> "[root] module.autoscaling_schedule.var.autoscaling_group_name"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" -> "[root] module.autoscaling_schedule.var.desired_capacity_day"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" -> "[root] module.autoscaling_schedule.var.max_size_day"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" -> "[root] module.autoscaling_schedule.var.min_size_day"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day" -> "[root] module.autoscaling_schedule.var.recurrence_day"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" -> "[root] module.autoscaling_schedule.var.autoscaling_group_name"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" -> "[root] module.autoscaling_schedule.var.desired_capacity_night"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" -> "[root] module.autoscaling_schedule.var.max_size_night"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" -> "[root] module.autoscaling_schedule.var.min_size_night"
		"[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night" -> "[root] module.autoscaling_schedule.var.recurrence_night"
		"[root] module.autoscaling_schedule.var.autoscaling_group_name" -> "[root] module.autoscaling_ecs_cluster.output.cluster_name"
		"[root] module.autoscaling_schedule.var.desired_capacity_day" -> "[root] var.desired_capacity_day"
		"[root] module.autoscaling_schedule.var.desired_capacity_night" -> "[root] var.desired_capacity_night"
		"[root] module.autoscaling_schedule.var.max_size_day" -> "[root] var.max_size_day"
		"[root] module.autoscaling_schedule.var.max_size_night" -> "[root] var.max_size_night"
		"[root] module.autoscaling_schedule.var.min_size_day" -> "[root] var.min_size_day"
		"[root] module.autoscaling_schedule.var.min_size_night" -> "[root] var.min_size_night"
		"[root] module.autoscaling_schedule.var.recurrence_day" -> "[root] var.recurrence_day"
		"[root] module.autoscaling_schedule.var.recurrence_night" -> "[root] var.recurrence_night"
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.bucket-rds-log.data.template_file.bucket_policy"
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.bucket-rds-log.var.bucket_acl"
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.bucket-rds-log.var.bucket_tag_name"
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.bucket-rds-log.var.days_in_s3"
		"[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.bucket-rds-log.var.owner"
		"[root] module.bucket-rds-log.data.template_file.bucket_policy" -> "[root] module.bucket-rds-log.var.account_id"
		"[root] module.bucket-rds-log.data.template_file.bucket_policy" -> "[root] module.bucket-rds-log.var.bucket_log_region"
		"[root] module.bucket-rds-log.data.template_file.bucket_policy" -> "[root] module.bucket-rds-log.var.bucket_name"
		"[root] module.bucket-rds-log.data.template_file.bucket_policy" -> "[root] provider.template"
		"[root] module.bucket-rds-log.output.bucket_domain_name" -> "[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket"
		"[root] module.bucket-rds-log.output.bucket_short_name" -> "[root] module.bucket-rds-log.aws_s3_bucket.s3-glacier-bucket"
		"[root] module.bucket-rds-log.var.account_id" -> "[root] data.aws_caller_identity.current"
		"[root] module.bucket-rds-log.var.bucket_log_region" -> "[root] var.region"
		"[root] module.bucket-rds-log.var.bucket_name" -> "[root] module.aurora_cluster.output.cluster_name"
		"[root] module.bucket-rds-log.var.bucket_tag_name" -> "[root] var.owner"
		"[root] module.bucket-rds-log.var.days_in_s3" -> "[root] var.days_in_s3"
		"[root] module.bucket-rds-log.var.owner" -> "[root] var.owner"
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.cf-bucket.var.account_id"
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.cf-bucket.var.bucket_acl"
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.cf-bucket.var.bucket_name"
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.cf-bucket.var.bucket_tag_name"
		"[root] module.cf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.cf-bucket.var.owner"
		"[root] module.cf-bucket.output.bucket_domain_name" -> "[root] module.cf-bucket.aws_s3_bucket.s3-bucket"
		"[root] module.cf-bucket.output.bucket_short_name" -> "[root] module.cf-bucket.aws_s3_bucket.s3-bucket"
		"[root] module.cf-bucket.var.account_id" -> "[root] data.aws_caller_identity.current"
		"[root] module.cf-bucket.var.bucket_name" -> "[root] var.owner"
		"[root] module.cf-bucket.var.bucket_tag_name" -> "[root] var.owner"
		"[root] module.cf-bucket.var.owner" -> "[root] var.owner"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.certificate_body"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.certificate_chain"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.certificate_folder"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.certificate_name_prefix"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.certificate_private_key"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] module.cf_certificate.var.path"
		"[root] module.cf_certificate.aws_iam_server_certificate.certificate" -> "[root] provider.aws"
		"[root] module.cf_certificate.output.ssl_certificate_arn" -> "[root] module.cf_certificate.aws_iam_server_certificate.certificate"
		"[root] module.cf_certificate.output.ssl_certificate_id" -> "[root] module.cf_certificate.aws_iam_server_certificate.certificate"
		"[root] module.cf_certificate.var.certificate_body" -> "[root] var.certificate_body"
		"[root] module.cf_certificate.var.certificate_chain" -> "[root] var.certificate_chain"
		"[root] module.cf_certificate.var.certificate_folder" -> "[root] var.certificate_folder"
		"[root] module.cf_certificate.var.certificate_name_prefix" -> "[root] var.certificate_name_prefix"
		"[root] module.cf_certificate.var.certificate_private_key" -> "[root] var.certificate_private_key"
		"[root] module.cf_certificate.var.path" -> "[root] var.owner"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.alias_alb"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.alias_cf"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.certificate_iam_id"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.logbucket"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.origin_protocol_policy"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.owner"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.viewer_protocol_policy"
		"[root] module.cloudfront.aws_cloudfront_distribution.cloudfront" -> "[root] module.cloudfront.var.web_acl_id"
		"[root] module.cloudfront.output.cf_domain_name" -> "[root] module.cloudfront.aws_cloudfront_distribution.cloudfront"
		"[root] module.cloudfront.var.alias_alb" -> "[root] var.alias_alb"
		"[root] module.cloudfront.var.alias_cf" -> "[root] var.alias_cf"
		"[root] module.cloudfront.var.certificate_iam_id" -> "[root] module.cf_certificate.output.ssl_certificate_id"
		"[root] module.cloudfront.var.logbucket" -> "[root] module.cf-bucket.output.bucket_domain_name"
		"[root] module.cloudfront.var.origin_protocol_policy" -> "[root] var.origin_protocol_policy"
		"[root] module.cloudfront.var.owner" -> "[root] var.owner"
		"[root] module.cloudfront.var.viewer_protocol_policy" -> "[root] var.viewer_protocol_policy"
		"[root] module.cloudfront.var.web_acl_id" -> "[root] module.waf_cloudformation.output.waf_web_acl_id"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23" -> "[root] provider.aws"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log" -> "[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log" -> "[root] module.cloudwatch-to-s3.var.arn_lambda_to_s3"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log" -> "[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log"
		"[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log" -> "[root] module.cloudwatch-to-s3.var.arn_lambda_to_s3"
		"[root] module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_rule.daily_23"
		"[root] module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log" -> "[root] module.cloudwatch-to-s3.var.lambda_name_to_s3"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log" -> "[root] module.cloudwatch-to-s3.var.app_log_bucket"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log" -> "[root] module.cloudwatch-to-s3.var.app_log_group"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log" -> "[root] module.cloudwatch-to-s3.var.days_in_cloudwatch"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log" -> "[root] module.cloudwatch-to-s3.var.days_in_cloudwatch"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log" -> "[root] module.cloudwatch-to-s3.var.rds_log_bucket"
		"[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log" -> "[root] module.cloudwatch-to-s3.var.rds_log_group"
		"[root] module.cloudwatch-to-s3.var.app_log_bucket" -> "[root] module.ecs-bucket.output.bucket_short_name"
		"[root] module.cloudwatch-to-s3.var.app_log_group" -> "[root] var.awslogs_group_suffix"
		"[root] module.cloudwatch-to-s3.var.app_log_group" -> "[root] var.family_common_name"
		"[root] module.cloudwatch-to-s3.var.arn_lambda_to_s3" -> "[root] module.s3-log-destination.output.lambda_arn"
		"[root] module.cloudwatch-to-s3.var.days_in_cloudwatch" -> "[root] var.days_in_cloudwatch"
		"[root] module.cloudwatch-to-s3.var.lambda_name_to_s3" -> "[root] module.s3-log-destination.output.lambda_name"
		"[root] module.cloudwatch-to-s3.var.rds_log_bucket" -> "[root] module.bucket-rds-log.output.bucket_short_name"
		"[root] module.cloudwatch-to-s3.var.rds_log_group" -> "[root] module.aurora_cluster.output.cluster_name"
		"[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group.var.log_group_name"
		"[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group.var.owner"
		"[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group.var.retention"
		"[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] provider.aws"
		"[root] module.cloudwatch_log_group.output.log_group_arn" -> "[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] module.cloudwatch_log_group.var.log_group_name" -> "[root] var.awslogs_group_suffix"
		"[root] module.cloudwatch_log_group.var.log_group_name" -> "[root] var.family_common_name"
		"[root] module.cloudwatch_log_group.var.owner" -> "[root] var.owner"
		"[root] module.cloudwatch_log_group.var.retention" -> "[root] var.retention"
		"[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_alfresco.var.log_group_name"
		"[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_alfresco.var.owner"
		"[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_alfresco.var.retention"
		"[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] provider.aws"
		"[root] module.cloudwatch_log_group_alfresco.output.log_group_arn" -> "[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] module.cloudwatch_log_group_alfresco.var.log_group_name" -> "[root] var.awslogs_group_suffix"
		"[root] module.cloudwatch_log_group_alfresco.var.log_group_name" -> "[root] var.family_common_name_alfresco"
		"[root] module.cloudwatch_log_group_alfresco.var.owner" -> "[root] var.owner"
		"[root] module.cloudwatch_log_group_alfresco.var.retention" -> "[root] var.retention"
		"[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_aurora.var.log_group_name"
		"[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_aurora.var.owner"
		"[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name" -> "[root] module.cloudwatch_log_group_aurora.var.retention"
		"[root] module.cloudwatch_log_group_aurora.output.log_group_arn" -> "[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] module.cloudwatch_log_group_aurora.var.log_group_name" -> "[root] module.aurora_cluster.output.cluster_name"
		"[root] module.cloudwatch_log_group_aurora.var.owner" -> "[root] var.owner"
		"[root] module.cloudwatch_log_group_aurora.var.retention" -> "[root] var.retention"
		"[root] module.ec2_ssh_key.aws_key_pair.ssh-key" -> "[root] module.ec2_ssh_key.var.key_path_name"
		"[root] module.ec2_ssh_key.aws_key_pair.ssh-key" -> "[root] provider.aws"
		"[root] module.ec2_ssh_key.output.ssh_key_name" -> "[root] module.ec2_ssh_key.aws_key_pair.ssh-key"
		"[root] module.ec2_ssh_key.var.key_path_name" -> "[root] var.key_path_name"
		"[root] module.ecr-alfresco.aws_ecr_lifecycle_policy.ecr_lifecycle" -> "[root] module.ecr-alfresco.aws_ecr_repository.ecr"
		"[root] module.ecr-alfresco.aws_ecr_repository.ecr" -> "[root] module.ecr-alfresco.var.ecr_name_suffix"
		"[root] module.ecr-alfresco.aws_ecr_repository.ecr" -> "[root] module.ecr-alfresco.var.owner"
		"[root] module.ecr-alfresco.aws_ecr_repository.ecr" -> "[root] provider.aws"
		"[root] module.ecr-alfresco.output.repository_url" -> "[root] module.ecr-alfresco.aws_ecr_repository.ecr"
		"[root] module.ecr-alfresco.var.ecr_name_suffix" -> "[root] var.ecr_name_suffix"
		"[root] module.ecr-alfresco.var.owner" -> "[root] var.owner"
		"[root] module.ecr-schede.aws_ecr_lifecycle_policy.ecr_lifecycle" -> "[root] module.ecr-schede.aws_ecr_repository.ecr"
		"[root] module.ecr-schede.aws_ecr_repository.ecr" -> "[root] module.ecr-schede.var.ecr_name_suffix"
		"[root] module.ecr-schede.aws_ecr_repository.ecr" -> "[root] module.ecr-schede.var.owner"
		"[root] module.ecr-schede.aws_ecr_repository.ecr" -> "[root] provider.aws"
		"[root] module.ecr-schede.output.repository_url" -> "[root] module.ecr-schede.aws_ecr_repository.ecr"
		"[root] module.ecr-schede.var.ecr_name_suffix" -> "[root] var.ecr_name_suffix"
		"[root] module.ecr-schede.var.owner" -> "[root] var.owner"
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.ecs-bucket.data.template_file.bucket_policy"
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.ecs-bucket.var.bucket_acl"
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.ecs-bucket.var.bucket_tag_name"
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.ecs-bucket.var.days_in_s3"
		"[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket" -> "[root] module.ecs-bucket.var.owner"
		"[root] module.ecs-bucket.data.template_file.bucket_policy" -> "[root] module.ecs-bucket.var.account_id"
		"[root] module.ecs-bucket.data.template_file.bucket_policy" -> "[root] module.ecs-bucket.var.bucket_log_region"
		"[root] module.ecs-bucket.data.template_file.bucket_policy" -> "[root] module.ecs-bucket.var.bucket_name"
		"[root] module.ecs-bucket.data.template_file.bucket_policy" -> "[root] provider.template"
		"[root] module.ecs-bucket.output.bucket_domain_name" -> "[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket"
		"[root] module.ecs-bucket.output.bucket_short_name" -> "[root] module.ecs-bucket.aws_s3_bucket.s3-glacier-bucket"
		"[root] module.ecs-bucket.var.account_id" -> "[root] data.aws_caller_identity.current"
		"[root] module.ecs-bucket.var.bucket_log_region" -> "[root] var.region"
		"[root] module.ecs-bucket.var.bucket_name" -> "[root] var.owner"
		"[root] module.ecs-bucket.var.bucket_tag_name" -> "[root] var.owner"
		"[root] module.ecs-bucket.var.days_in_s3" -> "[root] var.days_in_s3"
		"[root] module.ecs-bucket.var.owner" -> "[root] var.owner"
		"[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster" -> "[root] module.ecs_cluster.var.cluster_name"
		"[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster" -> "[root] module.ecs_cluster.var.owner"
		"[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster" -> "[root] provider.aws"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.data.aws_ecs_task_definition.main-app"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.var.desired_count"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.var.iam_role"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.var.load_balancer_container_port"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.var.load_balancer_target_group_arn"
		"[root] module.ecs_cluster.aws_ecs_service.main-app" -> "[root] module.ecs_cluster.var.service_name"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.data.template_file.container_configuration"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.var.family"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.var.owner"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.var.vol_host_path_logs"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.var.vol_host_path_resources"
		"[root] module.ecs_cluster.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.var.vol_host_path_templates"
		"[root] module.ecs_cluster.data.aws_ecs_task_definition.main-app" -> "[root] module.ecs_cluster.aws_ecs_task_definition.main-app"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.awslogs_group"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.awslogs_region"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.awslogs_stream_prefix"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.container_image"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.container_name"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.container_port"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.host_port"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_container_path_logs"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_container_path_resources"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_container_path_templates"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_name_logs"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_name_resources"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] module.ecs_cluster.var.vol_name_templates"
		"[root] module.ecs_cluster.data.template_file.container_configuration" -> "[root] provider.template"
		"[root] module.ecs_cluster.output.cluster_ecs_id" -> "[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster"
		"[root] module.ecs_cluster.output.cluster_ecs_name" -> "[root] module.ecs_cluster.aws_ecs_cluster.ecs_cluster"
		"[root] module.ecs_cluster.output.service_ecs_name" -> "[root] module.ecs_cluster.aws_ecs_service.main-app"
		"[root] module.ecs_cluster.var.awslogs_group" -> "[root] var.awslogs_group_suffix"
		"[root] module.ecs_cluster.var.awslogs_group" -> "[root] var.family_common_name"
		"[root] module.ecs_cluster.var.awslogs_region" -> "[root] var.region"
		"[root] module.ecs_cluster.var.awslogs_stream_prefix" -> "[root] var.cluster_name"
		"[root] module.ecs_cluster.var.cluster_name" -> "[root] var.cluster_name"
		"[root] module.ecs_cluster.var.container_image" -> "[root] module.ecr-schede.output.repository_url"
		"[root] module.ecs_cluster.var.container_name" -> "[root] var.container_name_suffix"
		"[root] module.ecs_cluster.var.container_name" -> "[root] var.family_common_name"
		"[root] module.ecs_cluster.var.container_port" -> "[root] var.load_balancer_container_port"
		"[root] module.ecs_cluster.var.desired_count" -> "[root] var.desired_count"
		"[root] module.ecs_cluster.var.family" -> "[root] var.family_common_name"
		"[root] module.ecs_cluster.var.host_port" -> "[root] var.alb_port"
		"[root] module.ecs_cluster.var.iam_role" -> "[root] module.iam_role.output.iam_role_name"
		"[root] module.ecs_cluster.var.load_balancer_container_port" -> "[root] var.load_balancer_container_port"
		"[root] module.ecs_cluster.var.load_balancer_target_group_arn" -> "[root] module.alb.output.servizio_da_bilanciare_id"
		"[root] module.ecs_cluster.var.owner" -> "[root] var.owner"
		"[root] module.ecs_cluster.var.service_name" -> "[root] var.service_name"
		"[root] module.ecs_cluster.var.vol_container_path_logs" -> "[root] var.vol_container_path_logs"
		"[root] module.ecs_cluster.var.vol_container_path_resources" -> "[root] var.vol_container_path_resources"
		"[root] module.ecs_cluster.var.vol_container_path_templates" -> "[root] var.vol_container_path_templates"
		"[root] module.ecs_cluster.var.vol_host_path_logs" -> "[root] var.vol_host_path_logs"
		"[root] module.ecs_cluster.var.vol_host_path_resources" -> "[root] var.vol_host_path_resources"
		"[root] module.ecs_cluster.var.vol_host_path_templates" -> "[root] var.vol_host_path_templates"
		"[root] module.ecs_cluster.var.vol_name_logs" -> "[root] var.vol_name_logs"
		"[root] module.ecs_cluster.var.vol_name_resources" -> "[root] var.vol_name_resources"
		"[root] module.ecs_cluster.var.vol_name_templates" -> "[root] var.vol_name_templates"
		"[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco" -> "[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco"
		"[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco" -> "[root] module.ecs_cluster_alfresco.var.cluster_ecs_id"
		"[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco" -> "[root] module.ecs_cluster_alfresco.var.desired_count"
		"[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco" -> "[root] module.ecs_cluster_alfresco.var.service_name"
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" -> "[root] module.ecs_cluster_alfresco.data.template_file.container_configuration"
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" -> "[root] module.ecs_cluster_alfresco.var.family"
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" -> "[root] module.ecs_cluster_alfresco.var.owner"
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" -> "[root] module.ecs_cluster_alfresco.var.vol_host_path_alf_data"
		"[root] module.ecs_cluster_alfresco.aws_ecs_task_definition.alfresco" -> "[root] module.ecs_cluster_alfresco.var.vol_host_path_content"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.awslogs_group"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.awslogs_region"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.awslogs_stream_prefix"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.container_image"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.container_name"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.container_port_CIFS"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.container_port_CMIS"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.container_port_main"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.host_port_CIFS"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.host_port_CMIS"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.host_port_main"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.vol_container_path_alf_data"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.vol_container_path_content"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.vol_name_alf_data"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] module.ecs_cluster_alfresco.var.vol_name_content"
		"[root] module.ecs_cluster_alfresco.data.template_file.container_configuration" -> "[root] provider.template"
		"[root] module.ecs_cluster_alfresco.output.service_ecs_name" -> "[root] module.ecs_cluster_alfresco.aws_ecs_service.alfresco"
		"[root] module.ecs_cluster_alfresco.var.awslogs_group" -> "[root] var.awslogs_group_suffix"
		"[root] module.ecs_cluster_alfresco.var.awslogs_group" -> "[root] var.family_common_name_alfresco"
		"[root] module.ecs_cluster_alfresco.var.awslogs_region" -> "[root] var.region"
		"[root] module.ecs_cluster_alfresco.var.cluster_ecs_id" -> "[root] module.ecs_cluster.output.cluster_ecs_id"
		"[root] module.ecs_cluster_alfresco.var.container_image" -> "[root] module.ecr-alfresco.output.repository_url"
		"[root] module.ecs_cluster_alfresco.var.container_name" -> "[root] var.container_name_suffix"
		"[root] module.ecs_cluster_alfresco.var.container_name" -> "[root] var.family_common_name_alfresco"
		"[root] module.ecs_cluster_alfresco.var.container_port_CIFS" -> "[root] var.container_port_CIFS"
		"[root] module.ecs_cluster_alfresco.var.container_port_CMIS" -> "[root] var.container_port_CMIS"
		"[root] module.ecs_cluster_alfresco.var.container_port_main" -> "[root] var.container_port_main"
		"[root] module.ecs_cluster_alfresco.var.desired_count" -> "[root] var.desired_count"
		"[root] module.ecs_cluster_alfresco.var.family" -> "[root] var.family_common_name_alfresco"
		"[root] module.ecs_cluster_alfresco.var.host_port_CIFS" -> "[root] var.host_port_CIFS"
		"[root] module.ecs_cluster_alfresco.var.host_port_CMIS" -> "[root] var.host_port_CMIS"
		"[root] module.ecs_cluster_alfresco.var.host_port_main" -> "[root] var.host_port_main"
		"[root] module.ecs_cluster_alfresco.var.owner" -> "[root] var.owner"
		"[root] module.ecs_cluster_alfresco.var.service_name" -> "[root] var.service_name_alfresco"
		"[root] module.ecs_cluster_alfresco.var.vol_container_path_alf_data" -> "[root] var.vol_container_path_alf_data"
		"[root] module.ecs_cluster_alfresco.var.vol_container_path_content" -> "[root] var.vol_container_path_content"
		"[root] module.ecs_cluster_alfresco.var.vol_host_path_alf_data" -> "[root] var.vol_host_path_alf_data"
		"[root] module.ecs_cluster_alfresco.var.vol_host_path_content" -> "[root] var.vol_host_path_content"
		"[root] module.ecs_cluster_alfresco.var.vol_name_alf_data" -> "[root] var.vol_name_alf_data"
		"[root] module.ecs_cluster_alfresco.var.vol_name_content" -> "[root] var.vol_name_content"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.c_subnet"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.owner"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.region"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.tag"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.vpc_address_space"
		"[root] module.ecs_subnet.aws_subnet.subnet" -> "[root] module.ecs_subnet.var.vpc_id"
		"[root] module.ecs_subnet.output.subnet_cidr_block" -> "[root] module.ecs_subnet.aws_subnet.subnet"
		"[root] module.ecs_subnet.output.subnet_id" -> "[root] module.ecs_subnet.aws_subnet.subnet"
		"[root] module.ecs_subnet.var.owner" -> "[root] var.owner"
		"[root] module.ecs_subnet.var.region" -> "[root] var.region"
		"[root] module.ecs_subnet.var.region" -> "[root] var.zones"
		"[root] module.ecs_subnet.var.tag" -> "[root] var.ecs_subnet_name_suffix"
		"[root] module.ecs_subnet.var.tag" -> "[root] var.owner"
		"[root] module.ecs_subnet.var.vpc_address_space" -> "[root] var.vpc_address_space"
		"[root] module.ecs_subnet.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.email"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.enabled"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.owner"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.src-efs"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.vpc-id"
		"[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs" -> "[root] module.efs-backup.var.zones"
		"[root] module.efs-backup.var.email" -> "[root] var.backup-email"
		"[root] module.efs-backup.var.owner" -> "[root] var.owner"
		"[root] module.efs-backup.var.src-efs" -> "[root] module.efs.output.dns_endpoint"
		"[root] module.efs-backup.var.vpc-id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.efs-backup.var.zones" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.efs.aws_efs_file_system.efs" -> "[root] module.efs.var.efs_name"
		"[root] module.efs.aws_efs_file_system.efs" -> "[root] module.efs.var.efs_token"
		"[root] module.efs.aws_efs_file_system.efs" -> "[root] module.efs.var.owner"
		"[root] module.efs.aws_efs_file_system.efs" -> "[root] provider.aws"
		"[root] module.efs.aws_efs_mount_target.mount_target" -> "[root] module.efs.aws_efs_file_system.efs"
		"[root] module.efs.aws_efs_mount_target.mount_target" -> "[root] module.efs.var.efs_sg"
		"[root] module.efs.aws_efs_mount_target.mount_target" -> "[root] module.efs.var.subnets_id"
		"[root] module.efs.output.dns_endpoint" -> "[root] module.efs.aws_efs_file_system.efs"
		"[root] module.efs.var.efs_name" -> "[root] var.owner"
		"[root] module.efs.var.efs_sg" -> "[root] module.security_group_efs.output.security_group_id"
		"[root] module.efs.var.owner" -> "[root] var.owner"
		"[root] module.efs.var.subnets_id" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar" -> "[root] module.elb_ecs.aws_elb.internal_elb"
		"[root] module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar" -> "[root] module.elb_ecs.var.asg_id"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_ext_port"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_ext_protocol"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_health_check_protocol"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_int_port"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_int_protocol"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.elb_name"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.owner"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.security_groups"
		"[root] module.elb_ecs.aws_elb.internal_elb" -> "[root] module.elb_ecs.var.subnets"
		"[root] module.elb_ecs.aws_lb_cookie_stickiness_policy.stickiness" -> "[root] module.elb_ecs.aws_elb.internal_elb"
		"[root] module.elb_ecs.output.elb_dns_name" -> "[root] module.elb_ecs.aws_elb.internal_elb"
		"[root] module.elb_ecs.var.asg_id" -> "[root] module.autoscaling_ecs_cluster.output.asg_id"
		"[root] module.elb_ecs.var.elb_ext_port" -> "[root] var.elb_ext_port"
		"[root] module.elb_ecs.var.elb_ext_protocol" -> "[root] var.elb_ext_protocol"
		"[root] module.elb_ecs.var.elb_health_check_protocol" -> "[root] var.elb_health_check_protocol"
		"[root] module.elb_ecs.var.elb_int_port" -> "[root] var.elb_int_port"
		"[root] module.elb_ecs.var.elb_int_protocol" -> "[root] var.elb_int_protocol"
		"[root] module.elb_ecs.var.elb_name" -> "[root] var.owner"
		"[root] module.elb_ecs.var.owner" -> "[root] var.owner"
		"[root] module.elb_ecs.var.security_groups" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] module.elb_ecs.var.subnets" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.iam_ecs_batch.aws_iam_instance_profile.simple_profile" -> "[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_ecs_batch.aws_iam_instance_profile.simple_profile" -> "[root] module.iam_ecs_batch.var.profile_enabled"
		"[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_ecs_batch.data.template_file.trust"
		"[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_ecs_batch.var.name"
		"[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_ecs_batch.var.owner"
		"[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role" -> "[root] provider.aws"
		"[root] module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment" -> "[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment" -> "[root] module.iam_ecs_batch.var.policy_arn"
		"[root] module.iam_ecs_batch.data.template_file.trust" -> "[root] module.iam_ecs_batch.var.service_name"
		"[root] module.iam_ecs_batch.data.template_file.trust" -> "[root] provider.template"
		"[root] module.iam_ecs_batch.output.simple_iam_role_arn" -> "[root] module.iam_ecs_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_ecs_batch.var.name" -> "[root] var.owner"
		"[root] module.iam_ecs_batch.var.owner" -> "[root] var.owner"
		"[root] module.iam_operations.aws_iam_access_key.operations" -> "[root] module.iam_operations.aws_iam_user.operations"
		"[root] module.iam_operations.aws_iam_user.operations" -> "[root] module.iam_operations.var.operations_name"
		"[root] module.iam_operations.aws_iam_user.operations" -> "[root] provider.aws"
		"[root] module.iam_operations.aws_iam_user_policy_attachment.operations" -> "[root] module.iam_operations.aws_iam_user.operations"
		"[root] module.iam_operations.output.iam_operations_access" -> "[root] module.iam_operations.aws_iam_access_key.operations"
		"[root] module.iam_operations.output.iam_operations_secret" -> "[root] module.iam_operations.aws_iam_access_key.operations"
		"[root] module.iam_operations.var.operations_name" -> "[root] var.owner"
		"[root] module.iam_role.aws_iam_instance_profile.basic_iam_instance_profile" -> "[root] module.iam_role.aws_iam_role.basic_iam_role"
		"[root] module.iam_role.aws_iam_instance_profile.basic_iam_instance_profile" -> "[root] module.iam_role.var.iam_instance_profile_name"
		"[root] module.iam_role.aws_iam_role.basic_iam_role" -> "[root] module.iam_role.var.iam_role_name"
		"[root] module.iam_role.aws_iam_role.basic_iam_role" -> "[root] provider.aws"
		"[root] module.iam_role.aws_iam_role_policy.basic_iam_role_policy" -> "[root] module.iam_role.aws_iam_role.basic_iam_role"
		"[root] module.iam_role.aws_iam_role_policy.basic_iam_role_policy" -> "[root] module.iam_role.var.iam_role_policy_name"
		"[root] module.iam_role.output.iam_instance_profile_id" -> "[root] module.iam_role.aws_iam_instance_profile.basic_iam_instance_profile"
		"[root] module.iam_role.output.iam_role_arn" -> "[root] module.iam_role.aws_iam_role.basic_iam_role"
		"[root] module.iam_role.output.iam_role_name" -> "[root] module.iam_role.aws_iam_role.basic_iam_role"
		"[root] module.iam_role.var.iam_instance_profile_name" -> "[root] var.iam_instance_profile_name"
		"[root] module.iam_role.var.iam_role_name" -> "[root] var.iam_role_name"
		"[root] module.iam_service_batch.aws_iam_instance_profile.simple_profile" -> "[root] module.iam_service_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_service_batch.aws_iam_instance_profile.simple_profile" -> "[root] module.iam_service_batch.var.profile_enabled"
		"[root] module.iam_service_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_service_batch.data.template_file.trust"
		"[root] module.iam_service_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_service_batch.var.name"
		"[root] module.iam_service_batch.aws_iam_role.iam_simple_role" -> "[root] module.iam_service_batch.var.owner"
		"[root] module.iam_service_batch.aws_iam_role.iam_simple_role" -> "[root] provider.aws"
		"[root] module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment" -> "[root] module.iam_service_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment" -> "[root] module.iam_service_batch.var.policy_arn"
		"[root] module.iam_service_batch.data.template_file.trust" -> "[root] module.iam_service_batch.var.service_name"
		"[root] module.iam_service_batch.data.template_file.trust" -> "[root] provider.template"
		"[root] module.iam_service_batch.output.simple_iam_role_arn" -> "[root] module.iam_service_batch.aws_iam_role.iam_simple_role"
		"[root] module.iam_service_batch.var.name" -> "[root] var.owner"
		"[root] module.iam_service_batch.var.owner" -> "[root] var.owner"
		"[root] module.iam_ses.aws_iam_access_key.ses" -> "[root] module.iam_ses.aws_iam_user.ses"
		"[root] module.iam_ses.aws_iam_user.ses" -> "[root] module.iam_ses.var.ses_sender"
		"[root] module.iam_ses.aws_iam_user.ses" -> "[root] provider.aws"
		"[root] module.iam_ses.aws_iam_user_policy.ses_send" -> "[root] module.iam_ses.aws_iam_user.ses"
		"[root] module.iam_ses.output.ses_smtp_password" -> "[root] module.iam_ses.aws_iam_access_key.ses"
		"[root] module.iam_ses.output.user" -> "[root] module.iam_ses.aws_iam_access_key.ses"
		"[root] module.iam_ses.var.ses_sender" -> "[root] var.owner"
		"[root] module.internet_gateway.aws_eip.nat_eip" -> "[root] module.internet_gateway.aws_internet_gateway.internet_gateway"
		"[root] module.internet_gateway.aws_internet_gateway.internet_gateway" -> "[root] module.internet_gateway.var.owner"
		"[root] module.internet_gateway.aws_internet_gateway.internet_gateway" -> "[root] module.internet_gateway.var.vpc_id"
		"[root] module.internet_gateway.aws_nat_gateway.nat_gw" -> "[root] module.internet_gateway.aws_eip.nat_eip"
		"[root] module.internet_gateway.aws_nat_gateway.nat_gw" -> "[root] module.internet_gateway.var.nat_gateway_subnet_id"
		"[root] module.internet_gateway.output.internet_gateway_id" -> "[root] module.internet_gateway.aws_internet_gateway.internet_gateway"
		"[root] module.internet_gateway.output.nat_gateway_id" -> "[root] module.internet_gateway.aws_nat_gateway.nat_gw"
		"[root] module.internet_gateway.var.nat_gateway_subnet_id" -> "[root] module.alb_subnet.output.subnet_id"
		"[root] module.internet_gateway.var.owner" -> "[root] var.owner"
		"[root] module.internet_gateway.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor" -> "[root] module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications"
		"[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor" -> "[root] module.lambda_alarms.var.evaluation_periods"
		"[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor" -> "[root] module.lambda_alarms.var.period"
		"[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor" -> "[root] module.lambda_alarms.var.upper_limit"
		"[root] module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications" -> "[root] module.lambda_alarms.var.owner"
		"[root] module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications" -> "[root] provider.aws"
		"[root] module.lambda_alarms.output.topic_arn" -> "[root] module.lambda_alarms.aws_sns_topic.cloudwatch_lambda_error_notifications"
		"[root] module.lambda_alarms.var.evaluation_periods" -> "[root] var.evaluation_periods"
		"[root] module.lambda_alarms.var.owner" -> "[root] var.owner"
		"[root] module.lambda_alarms.var.period" -> "[root] var.period"
		"[root] module.lambda_alarms.var.upper_limit" -> "[root] var.upper_limit_lambda_error"
		"[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda" -> "[root] module.lambda_alb_iam_role.var.name"
		"[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda" -> "[root] provider.aws"
		"[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach" -> "[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda"
		"[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach-ecs" -> "[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda"
		"[root] module.lambda_alb_iam_role.output.lambda_iam_role_arn" -> "[root] module.lambda_alb_iam_role.aws_iam_role.iam_for_lambda"
		"[root] module.lambda_alb_iam_role.var.name" -> "[root] var.owner"
		"[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group" -> "[root] module.lambda_cloudfront.data.archive_file.init"
		"[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group" -> "[root] module.lambda_cloudfront.var.owner"
		"[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group" -> "[root] module.lambda_cloudfront.var.rolearn"
		"[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group" -> "[root] module.lambda_cloudfront.var.sg_name"
		"[root] module.lambda_cloudfront.aws_lambda_permission.ipchanged_sns" -> "[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group"
		"[root] module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns" -> "[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group"
		"[root] module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns" -> "[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato"
		"[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato" -> "[root] module.lambda_cloudfront.var.sns_custom_topic"
		"[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato" -> "[root] provider.aws"
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription" -> "[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group"
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription" -> "[root] provider.aws.virginia"
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription" -> "[root] module.lambda_cloudfront.aws_lambda_function.update_alb_security_group"
		"[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription" -> "[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato"
		"[root] module.lambda_cloudfront.data.archive_file.init" -> "[root] module.lambda_cloudfront.var.filename"
		"[root] module.lambda_cloudfront.data.archive_file.init" -> "[root] provider.archive"
		"[root] module.lambda_cloudfront.output.lambda_sns_topic_arn" -> "[root] module.lambda_cloudfront.aws_sns_topic.waf_copletato"
		"[root] module.lambda_cloudfront.var.filename" -> "[root] var.lambda_filename"
		"[root] module.lambda_cloudfront.var.owner" -> "[root] var.owner"
		"[root] module.lambda_cloudfront.var.rolearn" -> "[root] module.lambda_alb_iam_role.output.lambda_iam_role_arn"
		"[root] module.lambda_cloudfront.var.sg_name" -> "[root] module.security_group_alb.output.security_group_name"
		"[root] module.lambda_cloudfront.var.sns_custom_topic" -> "[root] var.owner"
		"[root] module.lambda_export_log_role.aws_iam_policy.iam_policy" -> "[root] module.lambda_export_log_role.var.name"
		"[root] module.lambda_export_log_role.aws_iam_policy.iam_policy" -> "[root] provider.aws"
		"[root] module.lambda_export_log_role.aws_iam_role.iam_role" -> "[root] module.lambda_export_log_role.var.name"
		"[root] module.lambda_export_log_role.aws_iam_role.iam_role" -> "[root] provider.aws"
		"[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment" -> "[root] module.lambda_export_log_role.aws_iam_role.iam_role"
		"[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" -> "[root] module.lambda_export_log_role.aws_iam_policy.iam_policy"
		"[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" -> "[root] module.lambda_export_log_role.aws_iam_role.iam_role"
		"[root] module.lambda_export_log_role.output.lambda_iam_role_arn" -> "[root] module.lambda_export_log_role.aws_iam_role.iam_role"
		"[root] module.lambda_iam_role.aws_iam_role.iam_for_lambda" -> "[root] module.lambda_iam_role.var.name"
		"[root] module.lambda_iam_role.aws_iam_role.iam_for_lambda" -> "[root] provider.aws"
		"[root] module.lambda_iam_role.aws_iam_role_policy_attachment.lambda-attach" -> "[root] module.lambda_iam_role.aws_iam_role.iam_for_lambda"
		"[root] module.lambda_iam_role.output.lambda_iam_role_arn" -> "[root] module.lambda_iam_role.aws_iam_role.iam_for_lambda"
		"[root] module.lambda_iam_role.var.name" -> "[root] var.owner"
		"[root] module.logstash-role.aws_iam_policy.iam_policy" -> "[root] module.logstash-role.data.template_file.policy_configuration"
		"[root] module.logstash-role.aws_iam_policy.iam_policy" -> "[root] module.logstash-role.var.name"
		"[root] module.logstash-role.aws_iam_role.iam_role" -> "[root] module.logstash-role.var.name"
		"[root] module.logstash-role.aws_iam_role.iam_role" -> "[root] provider.aws"
		"[root] module.logstash-role.aws_iam_role_policy_attachment.AWSLambdaVPCAccessExecutionRole" -> "[root] module.logstash-role.aws_iam_role.iam_role"
		"[root] module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" -> "[root] module.logstash-role.aws_iam_policy.iam_policy"
		"[root] module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom" -> "[root] module.logstash-role.aws_iam_role.iam_role"
		"[root] module.logstash-role.data.template_file.policy_configuration" -> "[root] module.logstash-role.var.aws_user_id"
		"[root] module.logstash-role.data.template_file.policy_configuration" -> "[root] module.logstash-role.var.dynamo_region"
		"[root] module.logstash-role.data.template_file.policy_configuration" -> "[root] module.logstash-role.var.es_domain"
		"[root] module.logstash-role.data.template_file.policy_configuration" -> "[root] module.logstash-role.var.es_region"
		"[root] module.logstash-role.data.template_file.policy_configuration" -> "[root] provider.template"
		"[root] module.logstash-role.output.role_arn" -> "[root] module.logstash-role.aws_iam_role.iam_role"
		"[root] module.logstash-role.var.aws_user_id" -> "[root] data.aws_caller_identity.current"
		"[root] module.logstash-role.var.dynamo_region" -> "[root] var.region"
		"[root] module.logstash-role.var.es_domain" -> "[root] var.es_domain"
		"[root] module.logstash-role.var.es_region" -> "[root] var.es_region"
		"[root] module.logstash-role.var.name" -> "[root] var.owner"
		"[root] module.rds_audit_iam_role.aws_iam_policy.iam_rds_log_policy" -> "[root] module.rds_audit_iam_role.var.name"
		"[root] module.rds_audit_iam_role.aws_iam_policy.iam_rds_log_policy" -> "[root] provider.aws"
		"[root] module.rds_audit_iam_role.aws_iam_role.iam_rds_log" -> "[root] module.rds_audit_iam_role.var.name"
		"[root] module.rds_audit_iam_role.aws_iam_role.iam_rds_log" -> "[root] provider.aws"
		"[root] module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy" -> "[root] module.rds_audit_iam_role.aws_iam_policy.iam_rds_log_policy"
		"[root] module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy" -> "[root] module.rds_audit_iam_role.aws_iam_role.iam_rds_log"
		"[root] module.rds_audit_iam_role.output.iam_rds_log" -> "[root] module.rds_audit_iam_role.aws_iam_role.iam_rds_log"
		"[root] module.rds_audit_iam_role.var.name" -> "[root] var.owner"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.c_subnet"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.owner"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.region"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.tag"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.vpc_address_space"
		"[root] module.rds_subnet.aws_subnet.subnet" -> "[root] module.rds_subnet.var.vpc_id"
		"[root] module.rds_subnet.output.subnet_cidr_block" -> "[root] module.rds_subnet.aws_subnet.subnet"
		"[root] module.rds_subnet.output.subnet_id" -> "[root] module.rds_subnet.aws_subnet.subnet"
		"[root] module.rds_subnet.var.owner" -> "[root] var.owner"
		"[root] module.rds_subnet.var.region" -> "[root] var.region"
		"[root] module.rds_subnet.var.region" -> "[root] var.zones"
		"[root] module.rds_subnet.var.tag" -> "[root] var.owner"
		"[root] module.rds_subnet.var.tag" -> "[root] var.rds_subnet_name_suffix"
		"[root] module.rds_subnet.var.vpc_address_space" -> "[root] var.vpc_address_space"
		"[root] module.rds_subnet.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.route53.aws_route53_record.ecs_alfresco" -> "[root] module.route53.aws_route53_zone.private_zone"
		"[root] module.route53.aws_route53_record.ecs_alfresco" -> "[root] module.route53.var.alfresco-elb"
		"[root] module.route53.aws_route53_record.ecs_alfresco" -> "[root] module.route53.var.alfresco-elb-DNS"
		"[root] module.route53.aws_route53_record.efs" -> "[root] module.route53.aws_route53_zone.private_zone"
		"[root] module.route53.aws_route53_record.efs" -> "[root] module.route53.var.efs"
		"[root] module.route53.aws_route53_record.efs" -> "[root] module.route53.var.efs-DNS"
		"[root] module.route53.aws_route53_record.rds_schede" -> "[root] module.route53.aws_route53_zone.private_zone"
		"[root] module.route53.aws_route53_record.rds_schede" -> "[root] module.route53.var.schede-rds"
		"[root] module.route53.aws_route53_record.rds_schede" -> "[root] module.route53.var.schede-rds-DNS"
		"[root] module.route53.aws_route53_zone.private_zone" -> "[root] module.route53.var.name"
		"[root] module.route53.aws_route53_zone.private_zone" -> "[root] module.route53.var.owner"
		"[root] module.route53.aws_route53_zone.private_zone" -> "[root] module.route53.var.vpc_id"
		"[root] module.route53.output.efs_dns" -> "[root] module.route53.aws_route53_record.efs"
		"[root] module.route53.var.alfresco-elb" -> "[root] var.alfresco-elb"
		"[root] module.route53.var.alfresco-elb-DNS" -> "[root] module.elb_ecs.output.elb_dns_name"
		"[root] module.route53.var.efs" -> "[root] var.efs"
		"[root] module.route53.var.efs-DNS" -> "[root] module.efs.output.dns_endpoint"
		"[root] module.route53.var.name" -> "[root] var.owner"
		"[root] module.route53.var.owner" -> "[root] var.owner"
		"[root] module.route53.var.schede-rds" -> "[root] var.schede-rds"
		"[root] module.route53.var.schede-rds-DNS" -> "[root] module.aurora_cluster.output.aurora_cluster_endpoint"
		"[root] module.route53.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.route_table_alb.aws_route.route" -> "[root] module.route_table_alb.aws_route_table.route_table"
		"[root] module.route_table_alb.aws_route.route" -> "[root] module.route_table_alb.var.cidr_block"
		"[root] module.route_table_alb.aws_route.route" -> "[root] module.route_table_alb.var.gateway_id"
		"[root] module.route_table_alb.aws_route.route_vpg" -> "[root] module.route_table_alb.aws_route_table.route_table"
		"[root] module.route_table_alb.aws_route.route_vpg" -> "[root] module.route_table_alb.var.vpg_destinations"
		"[root] module.route_table_alb.aws_route.route_vpg" -> "[root] module.route_table_alb.var.vpg_id"
		"[root] module.route_table_alb.aws_route_table.route_table" -> "[root] module.route_table_alb.var.owner"
		"[root] module.route_table_alb.aws_route_table.route_table" -> "[root] module.route_table_alb.var.tag"
		"[root] module.route_table_alb.aws_route_table.route_table" -> "[root] module.route_table_alb.var.vpc_id"
		"[root] module.route_table_alb.output.route_table_id" -> "[root] module.route_table_alb.aws_route_table.route_table"
		"[root] module.route_table_alb.var.gateway_id" -> "[root] module.internet_gateway.output.internet_gateway_id"
		"[root] module.route_table_alb.var.owner" -> "[root] var.owner"
		"[root] module.route_table_alb.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.route_table_association_alb.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_alb.var.route_table_id"
		"[root] module.route_table_association_alb.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_alb.var.subnet_id"
		"[root] module.route_table_association_alb.var.route_table_id" -> "[root] module.route_table_alb.output.route_table_id"
		"[root] module.route_table_association_alb.var.subnet_id" -> "[root] module.alb_subnet.output.subnet_id"
		"[root] module.route_table_association_aurora.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_aurora.var.route_table_id"
		"[root] module.route_table_association_aurora.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_aurora.var.subnet_id"
		"[root] module.route_table_association_aurora.var.route_table_id" -> "[root] module.route_table_aurora.output.route_table_id"
		"[root] module.route_table_association_aurora.var.subnet_id" -> "[root] module.rds_subnet.output.subnet_id"
		"[root] module.route_table_association_nat.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_nat.var.route_table_id"
		"[root] module.route_table_association_nat.aws_route_table_association.route_table_association" -> "[root] module.route_table_association_nat.var.subnet_id"
		"[root] module.route_table_association_nat.var.route_table_id" -> "[root] module.route_table_nat.output.route_table_id"
		"[root] module.route_table_association_nat.var.subnet_id" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.route_table_aurora.aws_route.route" -> "[root] module.route_table_aurora.aws_route_table.route_table"
		"[root] module.route_table_aurora.aws_route.route" -> "[root] module.route_table_aurora.var.cidr_block"
		"[root] module.route_table_aurora.aws_route.route" -> "[root] module.route_table_aurora.var.gateway_id"
		"[root] module.route_table_aurora.aws_route.route_vpg" -> "[root] module.route_table_aurora.aws_route_table.route_table"
		"[root] module.route_table_aurora.aws_route.route_vpg" -> "[root] module.route_table_aurora.var.vpg_destinations"
		"[root] module.route_table_aurora.aws_route.route_vpg" -> "[root] module.route_table_aurora.var.vpg_id"
		"[root] module.route_table_aurora.aws_route_table.route_table" -> "[root] module.route_table_aurora.var.owner"
		"[root] module.route_table_aurora.aws_route_table.route_table" -> "[root] module.route_table_aurora.var.tag"
		"[root] module.route_table_aurora.aws_route_table.route_table" -> "[root] module.route_table_aurora.var.vpc_id"
		"[root] module.route_table_aurora.output.route_table_id" -> "[root] module.route_table_aurora.aws_route_table.route_table"
		"[root] module.route_table_aurora.var.owner" -> "[root] var.owner"
		"[root] module.route_table_aurora.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.route_table_aurora.var.vpg_destinations" -> "[root] var.caramella_server"
		"[root] module.route_table_aurora.var.vpg_destinations" -> "[root] var.cidr_vpn_prom"
		"[root] module.route_table_aurora.var.vpg_id" -> "[root] module.vpg.output.vpg_id"
		"[root] module.route_table_nat.aws_route.nat_route" -> "[root] module.route_table_nat.aws_route_table.route_table"
		"[root] module.route_table_nat.aws_route.nat_route" -> "[root] module.route_table_nat.var.cidr_block"
		"[root] module.route_table_nat.aws_route.nat_route" -> "[root] module.route_table_nat.var.nat_gateway_id"
		"[root] module.route_table_nat.aws_route.vpg_route" -> "[root] module.route_table_nat.aws_route_table.route_table"
		"[root] module.route_table_nat.aws_route.vpg_route" -> "[root] module.route_table_nat.var.vpg_destinations"
		"[root] module.route_table_nat.aws_route.vpg_route" -> "[root] module.route_table_nat.var.vpg_id"
		"[root] module.route_table_nat.aws_route_table.route_table" -> "[root] module.route_table_nat.var.owner"
		"[root] module.route_table_nat.aws_route_table.route_table" -> "[root] module.route_table_nat.var.tag"
		"[root] module.route_table_nat.aws_route_table.route_table" -> "[root] module.route_table_nat.var.vpc_id"
		"[root] module.route_table_nat.output.route_table_id" -> "[root] module.route_table_nat.aws_route_table.route_table"
		"[root] module.route_table_nat.var.nat_gateway_id" -> "[root] module.internet_gateway.output.nat_gateway_id"
		"[root] module.route_table_nat.var.owner" -> "[root] var.owner"
		"[root] module.route_table_nat.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.route_table_nat.var.vpg_destinations" -> "[root] var.cidr_vpn_prom"
		"[root] module.route_table_nat.var.vpg_id" -> "[root] module.vpg.output.vpg_id"
		"[root] module.route_table_temp.aws_route.route" -> "[root] module.route_table_temp.aws_route_table.route_table"
		"[root] module.route_table_temp.aws_route.route" -> "[root] module.route_table_temp.var.cidr_block"
		"[root] module.route_table_temp.aws_route.route" -> "[root] module.route_table_temp.var.gateway_id"
		"[root] module.route_table_temp.aws_route.route_vpg" -> "[root] module.route_table_temp.aws_route_table.route_table"
		"[root] module.route_table_temp.aws_route.route_vpg" -> "[root] module.route_table_temp.var.vpg_destinations"
		"[root] module.route_table_temp.aws_route.route_vpg" -> "[root] module.route_table_temp.var.vpg_id"
		"[root] module.route_table_temp.aws_route_table.route_table" -> "[root] module.route_table_temp.var.owner"
		"[root] module.route_table_temp.aws_route_table.route_table" -> "[root] module.route_table_temp.var.tag"
		"[root] module.route_table_temp.aws_route_table.route_table" -> "[root] module.route_table_temp.var.vpc_id"
		"[root] module.route_table_temp.output.route_table_id" -> "[root] module.route_table_temp.aws_route_table.route_table"
		"[root] module.route_table_temp.var.gateway_id" -> "[root] module.internet_gateway.output.internet_gateway_id"
		"[root] module.route_table_temp.var.owner" -> "[root] var.owner"
		"[root] module.route_table_temp.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3" -> "[root] module.s3-log-destination.data.archive_file.init"
		"[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3" -> "[root] module.s3-log-destination.var.owner"
		"[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3" -> "[root] module.s3-log-destination.var.rolearn"
		"[root] module.s3-log-destination.data.archive_file.init" -> "[root] module.s3-log-destination.var.filename"
		"[root] module.s3-log-destination.data.archive_file.init" -> "[root] provider.archive"
		"[root] module.s3-log-destination.output.lambda_arn" -> "[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3"
		"[root] module.s3-log-destination.output.lambda_name" -> "[root] module.s3-log-destination.aws_lambda_function.move_logs_to_s3"
		"[root] module.s3-log-destination.var.filename" -> "[root] var.lambda_filename"
		"[root] module.s3-log-destination.var.owner" -> "[root] var.owner"
		"[root] module.s3-log-destination.var.rolearn" -> "[root] module.lambda_export_log_role.output.lambda_iam_role_arn"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down" -> "[root] module.scaling_asg.var.ecs_cluster_name"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down" -> "[root] module.scaling_asg.var.scaling_adjustment"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down" -> "[root] module.scaling_asg.var.scaling_cooldown"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down_mem" -> "[root] module.scaling_asg.var.ecs_cluster_name"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down_mem" -> "[root] module.scaling_asg.var.scaling_adjustment"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_down_mem" -> "[root] module.scaling_asg.var.scaling_cooldown"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up" -> "[root] module.scaling_asg.var.ecs_cluster_name"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up" -> "[root] module.scaling_asg.var.scaling_adjustment"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up" -> "[root] module.scaling_asg.var.scaling_cooldown"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up_mem" -> "[root] module.scaling_asg.var.ecs_cluster_name"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up_mem" -> "[root] module.scaling_asg.var.scaling_adjustment"
		"[root] module.scaling_asg.aws_autoscaling_policy.scale_up_mem" -> "[root] module.scaling_asg.var.scaling_cooldown"
		"[root] module.scaling_asg.output.scaledowncpu_arn" -> "[root] module.scaling_asg.aws_autoscaling_policy.scale_down"
		"[root] module.scaling_asg.output.scaledownmem_arn" -> "[root] module.scaling_asg.aws_autoscaling_policy.scale_down_mem"
		"[root] module.scaling_asg.output.scaleupcpu_arn" -> "[root] module.scaling_asg.aws_autoscaling_policy.scale_up"
		"[root] module.scaling_asg.output.scaleupmem_arn" -> "[root] module.scaling_asg.aws_autoscaling_policy.scale_up_mem"
		"[root] module.scaling_asg.var.ecs_cluster_name" -> "[root] module.autoscaling_ecs_cluster.output.cluster_name"
		"[root] module.scaling_asg.var.scaling_adjustment" -> "[root] var.scaling_adjustment"
		"[root] module.scaling_asg.var.scaling_cooldown" -> "[root] var.scaling_cooldown"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs.var.ecs_cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs.var.scaling_adjustment"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs.var.scaling_cooldown"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs.var.ecs_cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs.var.scaling_adjustment"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs.var.scaling_cooldown"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs.var.ecs_cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs.var.scaling_adjustment"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs.var.scaling_cooldown"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs.var.ecs_cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs.var.scaling_adjustment"
		"[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs.var.scaling_cooldown"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs.var.ecs_cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs.var.recurrence_day"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs.var.task_max_size_day"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs.var.task_min_size_day"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_day"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs.var.recurrence_night"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs.var.task_max_size_night"
		"[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs.var.task_min_size_night"
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs.var.cluster_name"
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs.var.ecs_iam_role"
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs.var.max_capacity"
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs.var.min_capacity"
		"[root] module.scaling_ecs.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs.var.service_name"
		"[root] module.scaling_ecs.output.scaledowncpu_arn" -> "[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down"
		"[root] module.scaling_ecs.output.scaledownmem_arn" -> "[root] module.scaling_ecs.aws_appautoscaling_policy.scale_down_mem"
		"[root] module.scaling_ecs.output.scaleupcpu_arn" -> "[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up"
		"[root] module.scaling_ecs.output.scaleupmem_arn" -> "[root] module.scaling_ecs.aws_appautoscaling_policy.scale_up_mem"
		"[root] module.scaling_ecs.var.cluster_name" -> "[root] module.ecs_cluster.output.cluster_ecs_name"
		"[root] module.scaling_ecs.var.ecs_cluster_name" -> "[root] module.autoscaling_ecs_cluster.output.cluster_name"
		"[root] module.scaling_ecs.var.ecs_iam_role" -> "[root] module.iam_role.output.iam_role_arn"
		"[root] module.scaling_ecs.var.max_capacity" -> "[root] var.ecs_max_size"
		"[root] module.scaling_ecs.var.min_capacity" -> "[root] var.ecs_min_size"
		"[root] module.scaling_ecs.var.recurrence_day" -> "[root] var.ecs_recurrence_day"
		"[root] module.scaling_ecs.var.recurrence_night" -> "[root] var.ecs_recurrence_night"
		"[root] module.scaling_ecs.var.scaling_cooldown" -> "[root] var.scaling_cooldown"
		"[root] module.scaling_ecs.var.service_name" -> "[root] module.ecs_cluster.output.service_ecs_name"
		"[root] module.scaling_ecs.var.task_max_size_day" -> "[root] var.ecs_max_size_day"
		"[root] module.scaling_ecs.var.task_max_size_night" -> "[root] var.ecs_max_size_night"
		"[root] module.scaling_ecs.var.task_min_size_day" -> "[root] var.ecs_min_size_day"
		"[root] module.scaling_ecs.var.task_min_size_night" -> "[root] var.ecs_min_size_night"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs_alfresco.var.ecs_cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs_alfresco.var.scaling_adjustment"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down" -> "[root] module.scaling_ecs_alfresco.var.scaling_cooldown"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs_alfresco.var.ecs_cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs_alfresco.var.scaling_adjustment"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem" -> "[root] module.scaling_ecs_alfresco.var.scaling_cooldown"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs_alfresco.var.ecs_cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs_alfresco.var.scaling_adjustment"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up" -> "[root] module.scaling_ecs_alfresco.var.scaling_cooldown"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs_alfresco.var.ecs_cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs_alfresco.var.scaling_adjustment"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem" -> "[root] module.scaling_ecs_alfresco.var.scaling_cooldown"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs_alfresco.var.ecs_cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs_alfresco.var.recurrence_day"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs_alfresco.var.task_max_size_day"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day" -> "[root] module.scaling_ecs_alfresco.var.task_min_size_day"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_day"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs_alfresco.var.recurrence_night"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs_alfresco.var.task_max_size_night"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night" -> "[root] module.scaling_ecs_alfresco.var.task_min_size_night"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs_alfresco.var.cluster_name"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs_alfresco.var.ecs_iam_role"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs_alfresco.var.max_capacity"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs_alfresco.var.min_capacity"
		"[root] module.scaling_ecs_alfresco.aws_appautoscaling_target.ecs_target" -> "[root] module.scaling_ecs_alfresco.var.service_name"
		"[root] module.scaling_ecs_alfresco.output.scaledowncpu_arn" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down"
		"[root] module.scaling_ecs_alfresco.output.scaledownmem_arn" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_down_mem"
		"[root] module.scaling_ecs_alfresco.output.scaleupcpu_arn" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up"
		"[root] module.scaling_ecs_alfresco.output.scaleupmem_arn" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_policy.scale_up_mem"
		"[root] module.scaling_ecs_alfresco.var.cluster_name" -> "[root] module.ecs_cluster.output.cluster_ecs_name"
		"[root] module.scaling_ecs_alfresco.var.ecs_cluster_name" -> "[root] module.autoscaling_ecs_cluster.output.cluster_name"
		"[root] module.scaling_ecs_alfresco.var.ecs_iam_role" -> "[root] module.iam_role.output.iam_role_arn"
		"[root] module.scaling_ecs_alfresco.var.max_capacity" -> "[root] var.ecs_max_size"
		"[root] module.scaling_ecs_alfresco.var.min_capacity" -> "[root] var.ecs_min_size"
		"[root] module.scaling_ecs_alfresco.var.recurrence_day" -> "[root] var.ecs_recurrence_day"
		"[root] module.scaling_ecs_alfresco.var.recurrence_night" -> "[root] var.ecs_recurrence_night"
		"[root] module.scaling_ecs_alfresco.var.scaling_cooldown" -> "[root] var.scaling_cooldown"
		"[root] module.scaling_ecs_alfresco.var.service_name" -> "[root] module.ecs_cluster_alfresco.output.service_ecs_name"
		"[root] module.scaling_ecs_alfresco.var.task_max_size_day" -> "[root] var.ecs_max_size_day"
		"[root] module.scaling_ecs_alfresco.var.task_max_size_night" -> "[root] var.ecs_max_size_night"
		"[root] module.scaling_ecs_alfresco.var.task_min_size_day" -> "[root] var.ecs_min_size_day"
		"[root] module.scaling_ecs_alfresco.var.task_min_size_night" -> "[root] var.ecs_min_size_night"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.autoupdate"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.description"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.env_name"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.name"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.owner"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.protocol"
		"[root] module.security_group_alb.aws_security_group.security_group" -> "[root] module.security_group_alb.var.vpc_id"
		"[root] module.security_group_alb.aws_security_group_rule.egress_rule" -> "[root] module.security_group_alb.aws_security_group.security_group"
		"[root] module.security_group_alb.aws_security_group_rule.egress_rule" -> "[root] module.security_group_alb.var.egress"
		"[root] module.security_group_alb.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_alb.aws_security_group.security_group"
		"[root] module.security_group_alb.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_alb.var.ingress"
		"[root] module.security_group_alb.output.security_group_id" -> "[root] module.security_group_alb.aws_security_group.security_group"
		"[root] module.security_group_alb.output.security_group_name" -> "[root] module.security_group_alb.aws_security_group.security_group"
		"[root] module.security_group_alb.var.egress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_alb.var.env_name" -> "[root] var.owner"
		"[root] module.security_group_alb.var.owner" -> "[root] var.owner"
		"[root] module.security_group_alb.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.autoupdate"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.description"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.env_name"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.name"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.owner"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.protocol"
		"[root] module.security_group_aurora.aws_security_group.security_group" -> "[root] module.security_group_aurora.var.vpc_id"
		"[root] module.security_group_aurora.aws_security_group_rule.egress_rule" -> "[root] module.security_group_aurora.aws_security_group.security_group"
		"[root] module.security_group_aurora.aws_security_group_rule.egress_rule" -> "[root] module.security_group_aurora.var.egress"
		"[root] module.security_group_aurora.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_aurora.aws_security_group.security_group"
		"[root] module.security_group_aurora.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_aurora.var.ingress"
		"[root] module.security_group_aurora.output.security_group_id" -> "[root] module.security_group_aurora.aws_security_group.security_group"
		"[root] module.security_group_aurora.output.security_group_name" -> "[root] module.security_group_aurora.aws_security_group.security_group"
		"[root] module.security_group_aurora.var.egress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_aurora.var.env_name" -> "[root] var.owner"
		"[root] module.security_group_aurora.var.ingress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_aurora.var.ingress" -> "[root] var.caramella_server"
		"[root] module.security_group_aurora.var.ingress" -> "[root] var.cidr_vpn_prom"
		"[root] module.security_group_aurora.var.owner" -> "[root] var.owner"
		"[root] module.security_group_aurora.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.autoupdate"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.description"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.env_name"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.name"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.owner"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.protocol"
		"[root] module.security_group_ecs.aws_security_group.security_group" -> "[root] module.security_group_ecs.var.vpc_id"
		"[root] module.security_group_ecs.aws_security_group_rule.egress_rule" -> "[root] module.security_group_ecs.aws_security_group.security_group"
		"[root] module.security_group_ecs.aws_security_group_rule.egress_rule" -> "[root] module.security_group_ecs.var.egress"
		"[root] module.security_group_ecs.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_ecs.aws_security_group.security_group"
		"[root] module.security_group_ecs.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_ecs.var.ingress"
		"[root] module.security_group_ecs.output.security_group_id" -> "[root] module.security_group_ecs.aws_security_group.security_group"
		"[root] module.security_group_ecs.output.security_group_name" -> "[root] module.security_group_ecs.aws_security_group.security_group"
		"[root] module.security_group_ecs.var.egress" -> "[root] module.alb_subnet.output.subnet_cidr_block"
		"[root] module.security_group_ecs.var.egress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_ecs.var.egress" -> "[root] module.rds_subnet.output.subnet_cidr_block"
		"[root] module.security_group_ecs.var.env_name" -> "[root] var.owner"
		"[root] module.security_group_ecs.var.ingress" -> "[root] module.alb_subnet.output.subnet_cidr_block"
		"[root] module.security_group_ecs.var.ingress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_ecs.var.ingress" -> "[root] var.cidr_vpn_prom"
		"[root] module.security_group_ecs.var.owner" -> "[root] var.owner"
		"[root] module.security_group_ecs.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.autoupdate"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.description"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.env_name"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.name"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.owner"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.protocol"
		"[root] module.security_group_efs.aws_security_group.security_group" -> "[root] module.security_group_efs.var.vpc_id"
		"[root] module.security_group_efs.aws_security_group_rule.egress_rule" -> "[root] module.security_group_efs.aws_security_group.security_group"
		"[root] module.security_group_efs.aws_security_group_rule.egress_rule" -> "[root] module.security_group_efs.var.egress"
		"[root] module.security_group_efs.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_efs.aws_security_group.security_group"
		"[root] module.security_group_efs.aws_security_group_rule.ingress_rule" -> "[root] module.security_group_efs.var.ingress"
		"[root] module.security_group_efs.output.security_group_id" -> "[root] module.security_group_efs.aws_security_group.security_group"
		"[root] module.security_group_efs.output.security_group_name" -> "[root] module.security_group_efs.aws_security_group.security_group"
		"[root] module.security_group_efs.var.egress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_efs.var.env_name" -> "[root] var.owner"
		"[root] module.security_group_efs.var.ingress" -> "[root] module.ecs_subnet.output.subnet_cidr_block"
		"[root] module.security_group_efs.var.owner" -> "[root] var.owner"
		"[root] module.security_group_efs.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.ses-domain.aws_ses_domain_identity.domain" -> "[root] module.ses-domain.var.ses_domain"
		"[root] module.ses-domain.aws_ses_domain_identity.domain" -> "[root] provider.aws.ireland"
		"[root] module.ses-domain.output.txt_token" -> "[root] module.ses-domain.aws_ses_domain_identity.domain"
		"[root] module.ses-domain.var.ses_domain" -> "[root] var.ses-domain"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.data.archive_file.thezip"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.access_key"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.es_endpoint"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.es_region"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.owner"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.region"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.rolearn"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.secret_key"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.security_group_id"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.subnet_list"
		"[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http" -> "[root] module.sonda_schedetitolo_http.var.timeout"
		"[root] module.sonda_schedetitolo_http.data.archive_file.thezip" -> "[root] module.sonda_schedetitolo_http.var.name"
		"[root] module.sonda_schedetitolo_http.data.archive_file.thezip" -> "[root] provider.archive"
		"[root] module.sonda_schedetitolo_http.output.lambda_arn" -> "[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http"
		"[root] module.sonda_schedetitolo_http.output.lambda_name" -> "[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http"
		"[root] module.sonda_schedetitolo_http.var.access_key" -> "[root] module.iam_operations.output.iam_operations_access"
		"[root] module.sonda_schedetitolo_http.var.es_endpoint" -> "[root] var.es_endpoint"
		"[root] module.sonda_schedetitolo_http.var.es_region" -> "[root] var.es_region"
		"[root] module.sonda_schedetitolo_http.var.owner" -> "[root] var.owner"
		"[root] module.sonda_schedetitolo_http.var.region" -> "[root] var.region"
		"[root] module.sonda_schedetitolo_http.var.rolearn" -> "[root] module.logstash-role.output.role_arn"
		"[root] module.sonda_schedetitolo_http.var.secret_key" -> "[root] module.iam_operations.output.iam_operations_secret"
		"[root] module.sonda_schedetitolo_http.var.security_group_id" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] module.sonda_schedetitolo_http.var.subnet_list" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate" -> "[root] module.sonda_schedetitolo_sql.var.name"
		"[root] module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate" -> "[root] module.sonda_schedetitolo_sql.var.owner"
		"[root] module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate" -> "[root] provider.aws"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.aws_dynamodb_table.savestate"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.data.archive_file.thezip"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.access_key"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.database_dbname"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.database_host"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.database_password"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.database_username"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.es_endpoint"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.es_region"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.region"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.rolearn"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.secret_key"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.security_group_id"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.subnet_list"
		"[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql" -> "[root] module.sonda_schedetitolo_sql.var.timeout"
		"[root] module.sonda_schedetitolo_sql.data.archive_file.thezip" -> "[root] module.sonda_schedetitolo_sql.var.name"
		"[root] module.sonda_schedetitolo_sql.data.archive_file.thezip" -> "[root] provider.archive"
		"[root] module.sonda_schedetitolo_sql.output.lambda_arn" -> "[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql"
		"[root] module.sonda_schedetitolo_sql.output.lambda_name" -> "[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql"
		"[root] module.sonda_schedetitolo_sql.var.access_key" -> "[root] module.iam_operations.output.iam_operations_access"
		"[root] module.sonda_schedetitolo_sql.var.database_dbname" -> "[root] var.rds_master_dbname"
		"[root] module.sonda_schedetitolo_sql.var.database_host" -> "[root] module.aurora_cluster.output.aurora_cluster_endpoint"
		"[root] module.sonda_schedetitolo_sql.var.database_password" -> "[root] var.rds_master_password"
		"[root] module.sonda_schedetitolo_sql.var.database_username" -> "[root] var.rds_master_username"
		"[root] module.sonda_schedetitolo_sql.var.es_endpoint" -> "[root] var.es_endpoint"
		"[root] module.sonda_schedetitolo_sql.var.es_region" -> "[root] var.es_region"
		"[root] module.sonda_schedetitolo_sql.var.owner" -> "[root] var.owner"
		"[root] module.sonda_schedetitolo_sql.var.region" -> "[root] var.region"
		"[root] module.sonda_schedetitolo_sql.var.rolearn" -> "[root] module.logstash-role.output.role_arn"
		"[root] module.sonda_schedetitolo_sql.var.secret_key" -> "[root] module.iam_operations.output.iam_operations_secret"
		"[root] module.sonda_schedetitolo_sql.var.security_group_id" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] module.sonda_schedetitolo_sql.var.subnet_list" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] module.vpc.aws_vpc.vpc" -> "[root] module.vpc.var.cidr_block"
		"[root] module.vpc.aws_vpc.vpc" -> "[root] module.vpc.var.enable_dns_hostnames"
		"[root] module.vpc.aws_vpc.vpc" -> "[root] module.vpc.var.owner"
		"[root] module.vpc.aws_vpc.vpc" -> "[root] module.vpc.var.tag"
		"[root] module.vpc.aws_vpc.vpc" -> "[root] provider.aws"
		"[root] module.vpc.output.vpc_id" -> "[root] module.vpc.aws_vpc.vpc"
		"[root] module.vpc.var.cidr_block" -> "[root] var.vpc_address_space"
		"[root] module.vpc.var.owner" -> "[root] var.owner"
		"[root] module.vpc.var.tag" -> "[root] var.owner"
		"[root] module.vpc.var.tag" -> "[root] var.vpc_name"
		"[root] module.vpg.aws_vpn_gateway.vpn_gw" -> "[root] module.vpg.var.owner"
		"[root] module.vpg.aws_vpn_gateway.vpn_gw" -> "[root] module.vpg.var.vpc_id"
		"[root] module.vpg.output.vpg_id" -> "[root] module.vpg.aws_vpn_gateway.vpn_gw"
		"[root] module.vpg.var.owner" -> "[root] var.owner"
		"[root] module.vpg.var.vpc_id" -> "[root] module.vpc.output.vpc_id"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole" -> "[root] module.waf-alb.var.cragr_url"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" -> "[root] module.waf-alb.var.cav_url"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" -> "[root] module.waf-alb.var.cs_url"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" -> "[root] module.waf-alb.var.rot_url"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama" -> "[root] module.waf-alb.var.gp_url"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_cragricole_ip" -> "[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip"
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_dns_others" -> "[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others"
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_groupama_ip" -> "[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip"
		"[root] module.waf-alb.aws_wafregional_regex_match_set.regex_others_ip" -> "[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip" -> "[root] module.waf-alb.var.cragr_addrs"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_cragricole_ip" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others" -> "[root] module.waf-alb.var.others_url"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_dns_others" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip" -> "[root] module.waf-alb.var.gp_addrs"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_groupama_ip" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip" -> "[root] module.waf-alb.var.others_addrs"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip" -> "[root] module.waf-alb.var.owner"
		"[root] module.waf-alb.aws_wafregional_regex_pattern_set.regex_others_ip" -> "[root] provider.aws"
		"[root] module.waf-alb.aws_wafregional_rule.rule_cragricole" -> "[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cragricole"
		"[root] module.waf-alb.aws_wafregional_rule.rule_cragricole" -> "[root] module.waf-alb.aws_wafregional_regex_match_set.regex_cragricole_ip"
		"[root] module.waf-alb.aws_wafregional_rule.rule_cs_rot_cav" -> "[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_cs_rot_cav"
		"[root] module.waf-alb.aws_wafregional_rule.rule_groupama" -> "[root] module.waf-alb.aws_wafregional_byte_match_set.byte_set_groupama"
		"[root] module.waf-alb.aws_wafregional_rule.rule_groupama" -> "[root] module.waf-alb.aws_wafregional_regex_match_set.regex_groupama_ip"
		"[root] module.waf-alb.aws_wafregional_rule.rule_others" -> "[root] module.waf-alb.aws_wafregional_regex_match_set.regex_dns_others"
		"[root] module.waf-alb.aws_wafregional_rule.rule_others" -> "[root] module.waf-alb.aws_wafregional_regex_match_set.regex_others_ip"
		"[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl" -> "[root] module.waf-alb.aws_wafregional_rule.rule_cragricole"
		"[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl" -> "[root] module.waf-alb.aws_wafregional_rule.rule_cs_rot_cav"
		"[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl" -> "[root] module.waf-alb.aws_wafregional_rule.rule_groupama"
		"[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl" -> "[root] module.waf-alb.aws_wafregional_rule.rule_others"
		"[root] module.waf-alb.aws_wafregional_web_acl_association.waf" -> "[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl"
		"[root] module.waf-alb.aws_wafregional_web_acl_association.waf" -> "[root] module.waf-alb.var.alb_arn"
		"[root] module.waf-alb.output.waf_web_acl_id" -> "[root] module.waf-alb.aws_wafregional_web_acl.waf_alb_acl"
		"[root] module.waf-alb.var.alb_arn" -> "[root] module.alb.output.alb_arn"
		"[root] module.waf-alb.var.cav_url" -> "[root] var.cav_url"
		"[root] module.waf-alb.var.cragr_addrs" -> "[root] var.cragr_addrs"
		"[root] module.waf-alb.var.cragr_url" -> "[root] var.cragr_url"
		"[root] module.waf-alb.var.cs_url" -> "[root] var.cs_url"
		"[root] module.waf-alb.var.gp_addrs" -> "[root] var.gp_addrs"
		"[root] module.waf-alb.var.gp_url" -> "[root] var.gp_url"
		"[root] module.waf-alb.var.others_addrs" -> "[root] var.others_addrs"
		"[root] module.waf-alb.var.others_url" -> "[root] var.others_url"
		"[root] module.waf-alb.var.owner" -> "[root] var.owner"
		"[root] module.waf-alb.var.rot_url" -> "[root] var.rot_url"
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.waf-bucket.var.account_id"
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.waf-bucket.var.bucket_acl"
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.waf-bucket.var.bucket_name"
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.waf-bucket.var.bucket_tag_name"
		"[root] module.waf-bucket.aws_s3_bucket.s3-bucket" -> "[root] module.waf-bucket.var.owner"
		"[root] module.waf-bucket.output.bucket_domain_name" -> "[root] module.waf-bucket.aws_s3_bucket.s3-bucket"
		"[root] module.waf-bucket.output.bucket_short_name" -> "[root] module.waf-bucket.aws_s3_bucket.s3-bucket"
		"[root] module.waf-bucket.var.account_id" -> "[root] data.aws_caller_identity.current"
		"[root] module.waf-bucket.var.bucket_name" -> "[root] var.owner"
		"[root] module.waf-bucket.var.bucket_tag_name" -> "[root] var.owner"
		"[root] module.waf-bucket.var.owner" -> "[root] var.owner"
		"[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf" -> "[root] module.waf_cloudformation.var.logbucket"
		"[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf" -> "[root] module.waf_cloudformation.var.name"
		"[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf" -> "[root] module.waf_cloudformation.var.owner"
		"[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf" -> "[root] module.waf_cloudformation.var.sns_custom_topic"
		"[root] module.waf_cloudformation.output.waf_web_acl_id" -> "[root] module.waf_cloudformation.aws_cloudformation_stack.cloudformation-waf"
		"[root] module.waf_cloudformation.var.logbucket" -> "[root] module.waf-bucket.output.bucket_domain_name"
		"[root] module.waf_cloudformation.var.owner" -> "[root] var.owner"
		"[root] module.waf_cloudformation.var.sns_custom_topic" -> "[root] module.lambda_cloudfront.output.lambda_sns_topic_arn"
		"[root] output.alarm_sns" -> "[root] module.lambda_alarms.output.topic_arn"
		"[root] output.ecs_key_name" -> "[root] module.ec2_ssh_key.output.ssh_key_name"
		"[root] output.ecs_sg_id" -> "[root] module.security_group_ecs.output.security_group_id"
		"[root] output.ecs_subnet_id" -> "[root] module.ecs_subnet.output.subnet_id"
		"[root] output.iam_operations_access_key" -> "[root] module.iam_operations.output.iam_operations_access"
		"[root] output.iam_operations_secret_key" -> "[root] module.iam_operations.output.iam_operations_secret"
		"[root] output.iam_ses_password" -> "[root] module.iam_ses.output.ses_smtp_password"
		"[root] output.iam_ses_user" -> "[root] module.iam_ses.output.user"
		"[root] output.ses_domain_verification_token" -> "[root] module.ses-domain.output.txt_token"
		"[root] provider.archive (close)" -> "[root] module.lambda_cloudfront.data.archive_file.init"
		"[root] provider.archive (close)" -> "[root] module.s3-log-destination.data.archive_file.init"
		"[root] provider.archive (close)" -> "[root] module.sonda_schedetitolo_http.data.archive_file.thezip"
		"[root] provider.archive (close)" -> "[root] module.sonda_schedetitolo_sql.data.archive_file.thezip"
		"[root] provider.aws (close)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_high"
		"[root] provider.aws (close)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_cpu_low"
		"[root] provider.aws (close)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_high"
		"[root] provider.aws (close)" -> "[root] module.alarms.aws_cloudwatch_metric_alarm.ecs_cluster_instances_memory_low"
		"[root] provider.aws (close)" -> "[root] module.alb.aws_alb_listener.front_end"
		"[root] provider.aws (close)" -> "[root] module.aurora_cluster.aws_rds_cluster_instance.aurora_cluster_instance"
		"[root] provider.aws (close)" -> "[root] module.autoscaling_bridge.aws_autoscaling_group.cluster"
		"[root] provider.aws (close)" -> "[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_day"
		"[root] provider.aws (close)" -> "[root] module.autoscaling_schedule.aws_autoscaling_schedule.schedule_night"
		"[root] provider.aws (close)" -> "[root] module.cloudfront.aws_cloudfront_distribution.cloudfront"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_log_app_log"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch-to-s3.aws_cloudwatch_event_target.lambda_migra_rds_log"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch-to-s3.aws_lambda_permission.allow_cloudwatch_to_call_lambda_migra_log"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch_log_group.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch_log_group_alfresco.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] provider.aws (close)" -> "[root] module.cloudwatch_log_group_aurora.aws_cloudwatch_log_group.cloudwatch_log_group_name"
		"[root] provider.aws (close)" -> "[root] module.ecr-alfresco.aws_ecr_lifecycle_policy.ecr_lifecycle"
		"[root] provider.aws (close)" -> "[root] module.ecr-schede.aws_ecr_lifecycle_policy.ecr_lifecycle"
		"[root] provider.aws (close)" -> "[root] module.efs-backup.aws_cloudformation_stack.cloudformation-backup-efs"
		"[root] provider.aws (close)" -> "[root] module.efs.aws_efs_mount_target.mount_target"
		"[root] provider.aws (close)" -> "[root] module.elb_ecs.aws_autoscaling_attachment.asg_attachment_bar"
		"[root] provider.aws (close)" -> "[root] module.elb_ecs.aws_lb_cookie_stickiness_policy.stickiness"
		"[root] provider.aws (close)" -> "[root] module.iam_ecs_batch.aws_iam_instance_profile.simple_profile"
		"[root] provider.aws (close)" -> "[root] module.iam_ecs_batch.aws_iam_role_policy_attachment.simple_policy_attachment"
		"[root] provider.aws (close)" -> "[root] module.iam_operations.aws_iam_user_policy_attachment.operations"
		"[root] provider.aws (close)" -> "[root] module.iam_role.aws_iam_role_policy.basic_iam_role_policy"
		"[root] provider.aws (close)" -> "[root] module.iam_service_batch.aws_iam_instance_profile.simple_profile"
		"[root] provider.aws (close)" -> "[root] module.iam_service_batch.aws_iam_role_policy_attachment.simple_policy_attachment"
		"[root] provider.aws (close)" -> "[root] module.iam_ses.aws_iam_access_key.ses"
		"[root] provider.aws (close)" -> "[root] module.iam_ses.aws_iam_user_policy.ses_send"
		"[root] provider.aws (close)" -> "[root] module.lambda_alarms.aws_cloudwatch_metric_alarm.lambda_errors_monitor"
		"[root] provider.aws (close)" -> "[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach"
		"[root] provider.aws (close)" -> "[root] module.lambda_alb_iam_role.aws_iam_role_policy_attachment.lambda-attach-ecs"
		"[root] provider.aws (close)" -> "[root] module.lambda_cloudfront.aws_lambda_permission.ipchanged_sns"
		"[root] provider.aws (close)" -> "[root] module.lambda_cloudfront.aws_lambda_permission.wafcompletato_sns"
		"[root] provider.aws (close)" -> "[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_wafcompletato_sns_subscription"
		"[root] provider.aws (close)" -> "[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment"
		"[root] provider.aws (close)" -> "[root] module.lambda_export_log_role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom"
		"[root] provider.aws (close)" -> "[root] module.lambda_iam_role.aws_iam_role_policy_attachment.lambda-attach"
		"[root] provider.aws (close)" -> "[root] module.logstash-role.aws_iam_role_policy_attachment.AWSLambdaVPCAccessExecutionRole"
		"[root] provider.aws (close)" -> "[root] module.logstash-role.aws_iam_role_policy_attachment.iam_role_policy_attachment_custom"
		"[root] provider.aws (close)" -> "[root] module.rds_audit_iam_role.aws_iam_role_policy_attachment.iam_rds_role_policy"
		"[root] provider.aws (close)" -> "[root] module.route53.aws_route53_record.ecs_alfresco"
		"[root] provider.aws (close)" -> "[root] module.route53.aws_route53_record.rds_schede"
		"[root] provider.aws (close)" -> "[root] module.route_table_alb.aws_route.route"
		"[root] provider.aws (close)" -> "[root] module.route_table_alb.aws_route.route_vpg"
		"[root] provider.aws (close)" -> "[root] module.route_table_association_alb.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.route_table_association_aurora.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.route_table_association_nat.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.route_table_aurora.aws_route.route"
		"[root] provider.aws (close)" -> "[root] module.route_table_aurora.aws_route.route_vpg"
		"[root] provider.aws (close)" -> "[root] module.route_table_nat.aws_route.nat_route"
		"[root] provider.aws (close)" -> "[root] module.route_table_nat.aws_route.vpg_route"
		"[root] provider.aws (close)" -> "[root] module.route_table_temp.aws_route.route"
		"[root] provider.aws (close)" -> "[root] module.route_table_temp.aws_route.route_vpg"
		"[root] provider.aws (close)" -> "[root] module.scaling_ecs.aws_appautoscaling_scheduled_action.ecs_night"
		"[root] provider.aws (close)" -> "[root] module.scaling_ecs_alfresco.aws_appautoscaling_scheduled_action.ecs_night"
		"[root] provider.aws (close)" -> "[root] module.security_group_alb.aws_security_group_rule.egress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_alb.aws_security_group_rule.ingress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_aurora.aws_security_group_rule.egress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_aurora.aws_security_group_rule.ingress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_ecs.aws_security_group_rule.egress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_ecs.aws_security_group_rule.ingress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_efs.aws_security_group_rule.egress_rule"
		"[root] provider.aws (close)" -> "[root] module.security_group_efs.aws_security_group_rule.ingress_rule"
		"[root] provider.aws (close)" -> "[root] module.sonda_schedetitolo_http.aws_lambda_function.logstash-http"
		"[root] provider.aws (close)" -> "[root] module.sonda_schedetitolo_sql.aws_lambda_function.logstash-sql"
		"[root] provider.aws (close)" -> "[root] module.waf-alb.aws_wafregional_web_acl_association.waf"
		"[root] provider.aws" -> "[root] var.region"
		"[root] provider.aws.ireland (close)" -> "[root] module.ses-domain.aws_ses_domain_identity.domain"
		"[root] provider.aws.virginia (close)" -> "[root] module.lambda_cloudfront.aws_sns_topic_subscription.topic_ipchanged_sns_subscription"
		"[root] provider.template (close)" -> "[root] module.autoscaling_bridge.data.template_file.user_data"
		"[root] provider.template (close)" -> "[root] module.autoscaling_bridge.data.template_file.user_data_loading"
		"[root] provider.template (close)" -> "[root] module.autoscaling_ecs_cluster.data.template_file.user_data"
		"[root] provider.template (close)" -> "[root] module.cloudwatch-to-s3.data.template_file.lambda_input_app_log"
		"[root] provider.template (close)" -> "[root] module.cloudwatch-to-s3.data.template_file.lambda_input_rds_log"
		"[root] provider.template (close)" -> "[root] module.ecs_cluster.data.template_file.container_configuration"
		"[root] provider.template (close)" -> "[root] module.ecs_cluster_alfresco.data.template_file.container_configuration"
		"[root] provider.template (close)" -> "[root] module.iam_ecs_batch.data.template_file.trust"
		"[root] provider.template (close)" -> "[root] module.iam_service_batch.data.template_file.trust"
		"[root] provider.template (close)" -> "[root] module.logstash-role.data.template_file.policy_configuration"
		"[root] root" -> "[root] meta.count-boundary (count boundary fixup)"
		"[root] root" -> "[root] provider.archive (close)"
		"[root] root" -> "[root] provider.aws (close)"
		"[root] root" -> "[root] provider.aws.ireland (close)"
		"[root] root" -> "[root] provider.aws.virginia (close)"
		"[root] root" -> "[root] provider.template (close)"
	}
}

